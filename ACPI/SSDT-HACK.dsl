/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20200925 (64-bit version)
 * Copyright (c) 2000 - 2020 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Original Table Header:
 *     Signature        "SSDT"
 *     Length           0x00004E87 (20103)
 *     Revision         0x02
 *     Checksum         0x0A
 *     OEM ID           "ASUS"
 *     OEM Table ID     "SSDT-Hck"
 *     OEM Revision     0x00000000 (0)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20200925 (538970405)
 */
DefinitionBlock ("", "SSDT", 2, "ASUS", "SSDT-Hck", 0x00000000)
{
    /*
     * iASL Warning: There were 17 external control methods found during
     * disassembly, but only 16 were resolved (1 unresolved). Additional
     * ACPI tables may be required to properly disassemble the code. This
     * resulting disassembler output file may not compile because the
     * disassembler did not know how many arguments to assign to the
     * unresolved methods. Note: SSDTs can be dynamically loaded at
     * runtime and may or may not be available via the host OS.
     *
     * To specify the tables needed to resolve external control method
     * references, the -e option can be used to specify the filenames.
     * Example iASL invocations:
     *     iasl -e ssdt1.aml ssdt2.aml ssdt3.aml -d dsdt.aml
     *     iasl -e dsdt.aml ssdt2.aml -d ssdt1.aml
     *     iasl -e ssdt*.aml -d dsdt.aml
     *
     * In addition, the -fe option can be used to specify a file containing
     * control method external declarations with the associated method
     * argument counts. Each line of the file must be of the form:
     *     External (<method pathname>, MethodObj, <argument count>)
     * Invocation:
     *     iasl -fe refs.txt -d dsdt.aml
     *
     * The following methods were unresolved and many not compile properly
     * because the disassembler had to guess at the number of arguments
     * required for each:
     */
    External (_PR_.CPU0, DeviceObj)
    External (_PR_.CPU1, DeviceObj)
    External (_PR_.CPU2, DeviceObj)
    External (_PR_.CPU3, DeviceObj)
    External (_SB_.AC0_, DeviceObj)
    External (_SB_.AC0_._PSR, MethodObj)    // 0 Arguments
    External (_SB_.ATKD, DeviceObj)
    External (_SB_.ATKD.IANE, MethodObj)    // 1 Arguments
    External (_SB_.ATKD.PWKB, BuffObj)
    External (_SB_.ATKD.QMOD, MethodObj)    // 1 Arguments
    External (_SB_.KBLV, FieldUnitObj)
    External (_SB_.PCI0, DeviceObj)
    External (_SB_.PCI0.AC0_, DeviceObj)
    External (_SB_.PCI0.BAT0, DeviceObj)
    External (_SB_.PCI0.BAT0._BIF, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.BAT0.BIXT, PkgObj)
    External (_SB_.PCI0.BAT0.LFCC, IntObj)
    External (_SB_.PCI0.BAT0.NBIX, PkgObj)
    External (_SB_.PCI0.BAT0.PBIF, PkgObj)
    External (_SB_.PCI0.BAT0.PBST, PkgObj)
    External (_SB_.PCI0.BAT0.PUNT, IntObj)
    External (_SB_.PCI0.D00A, DeviceObj)
    External (_SB_.PCI0.GFX0, DeviceObj)
    External (_SB_.PCI0.LPCB, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_, DeviceObj)
    External (_SB_.PCI0.LPCB.EC0_.ACAP, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ADD2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.ADDR, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.ATKP, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.B0DV, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.BATP, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.BCN2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.BCNT, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.CMD2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.CMDB, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.DA20, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.DA21, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.DAT0, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.DAT1, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.EB0S, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.ECAV, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.ECPU, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.GBTT, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.MUEC, MutexObj)
    External (_SB_.PCI0.LPCB.EC0_.PRT2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.PRTC, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.RCBT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.RDBL, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.RDBT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.RDQK, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.RDWD, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.SBBY, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.SDBT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.SST2, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.SSTS, FieldUnitObj)
    External (_SB_.PCI0.LPCB.EC0_.ST83, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.SWTC, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.TACH, MethodObj)    // 1 Arguments
    External (_SB_.PCI0.LPCB.EC0_.WRAM, MethodObj)    // 2 Arguments
    External (_SB_.PCI0.LPCB.EC0_.WRBL, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.WRBT, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.WRQK, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.WRWD, IntObj)
    External (_SB_.PCI0.LPCB.EC0_.XQ0E, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.EC0_.XQ0F, MethodObj)    // 0 Arguments
    External (_SB_.PCI0.LPCB.HPET, DeviceObj)
    External (_SB_.QFAN, FieldUnitObj)
    External (ATKP, MethodObj)    // Warning: Unknown method, guessing 1 arguments
    External (BCN2, IntObj)
    External (BCNT, IntObj)
    External (BIXT, IntObj)
    External (BLLO, IntObj)
    External (BSLF, IntObj)
    External (CHGS, MethodObj)    // 1 Arguments
    External (DA20, IntObj)
    External (DA21, IntObj)
    External (DAT0, IntObj)
    External (DAT1, IntObj)
    External (KBLV, IntObj)
    External (LFCC, IntObj)
    External (MBLF, IntObj)
    External (NBIX, IntObj)
    External (PRT2, IntObj)
    External (PRTC, IntObj)
    External (SBBY, IntObj)
    External (SST2, IntObj)
    External (SSTS, IntObj)
    External (XPRW, MethodObj)    // 2 Arguments

    Method (XOSI, 1, NotSerialized)
    {
        Local0 = Package (0x14)
            {
                "Windows 2021"
            }
        If (_OSI ("Darwin"))
        {
            Return ((Ones != Match (Local0, MEQ, Arg0, MTR, Zero, Zero)))
        }
        Else
        {
            Return (_OSI (Arg0))
        }
    }

    Scope (_SB.PCI0)
    {
        Device (MCHC)
        {
            Name (_ADR, Zero)  // _ADR: Address
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Darwin"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Device (_SB.PCI0.D00A.BUS0)
    {
        Name (_CID, "smbus")  // _CID: Compatible ID
        Name (_ADR, Zero)  // _ADR: Address
        Device (DVL0)
        {
            Name (_ADR, 0x57)  // _ADR: Address
            Name (_CID, "diagsvault")  // _CID: Compatible ID
            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (!Arg2)
                {
                    Return (Buffer (One)
                    {
                         0x57                                             // W
                    })
                }

                Return (Package (0x02)
                {
                    "address", 
                    0x57
                })
            }
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (_OSI ("Darwin"))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Scope (\_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Darwin"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_Q0E, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                \_SB.ATKD.IANE (0x20)
            }

            XQ0E ()
        }

        Method (_Q0F, 0, NotSerialized)  // _Qxx: EC Query, xx=0x00-0xFF
        {
            If (ATKP)
            {
                \_SB.ATKD.IANE (0x10)
            }

            XQ0F ()
        }
    }

    Scope (_SB.ATKD)
    {
        Name (BOFF, Zero)
        Method (SKBL, 1, NotSerialized)
        {
            If (((Arg0 == 0xED) | (Arg0 == 0xFD)))
            {
                If (((Arg0 == 0xED) & (BOFF == 0xEA)))
                {
                    Local0 = Zero
                    BOFF = Arg0
                }
                ElseIf (((Arg0 == 0xFD) & (BOFF == 0xFA)))
                {
                    Local0 = Zero
                    BOFF = Arg0
                }
                Else
                {
                    Return (BOFF) /* \_SB_.ATKD.BOFF */
                }
            }
            ElseIf (((Arg0 == 0xEA) | (Arg0 == 0xFA)))
            {
                Local0 = KBLV /* External reference */
                BOFF = Arg0
            }
            Else
            {
                Local0 = Arg0
                KBLV = Arg0
            }

            Local1 = DerefOf (PWKB [Local0])
            ^^PCI0.LPCB.EC0.WRAM (0x04B1, Local1)
            Return (Local0)
        }

        Method (GKBL, 1, NotSerialized)
        {
            If ((Arg0 == 0xFF))
            {
                Return (BOFF) /* \_SB_.ATKD.BOFF */
            }

            Return (KBLV) /* External reference */
        }
    }

    Scope (_SB.PCI0.GFX0)
    {
        OperationRegion (RMP1, PCI_Config, 0x02, 0x02)
    }

    Device (_SB.PCI0.GFX0.PNLF)
    {
        Name (_ADR, Zero)  // _ADR: Address
        Name (_HID, EisaId ("APP0002"))  // _HID: Hardware ID
        Name (_CID, "backlight")  // _CID: Compatible ID
        Name (_UID, Zero)  // _UID: Unique ID
        Name (_STA, 0x0B)  // _STA: Status
        Field (RMP1, AnyAcc, NoLock, Preserve)
        {
            GDID,   16
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Local0 = ^GDID /* \_SB_.PCI0.GFX0.PNLF.GDID */
            If ((Ones != Match (Package (0x15)
                            {
                                0x42, 
                                0x46, 
                                0x4A, 
                                0x0102, 
                                0x0106, 
                                0x010A, 
                                0x010B, 
                                0x010E, 
                                0x0112, 
                                0x0116, 
                                0x0122, 
                                0x0126, 
                                0x0152, 
                                0x0156, 
                                0x015A, 
                                0x015E, 
                                0x0162, 
                                0x0166, 
                                0x016A, 
                                0x0172, 
                                0x0176
                            }, MEQ, Local0, MTR, Zero, Zero)))
            {
                _UID = 0x0E
            }
            ElseIf ((Ones != Match (Package (0x1D)
                            {
                                0x0402, 
                                0x0406, 
                                0x040A, 
                                0x0412, 
                                0x0416, 
                                0x041A, 
                                0x041E, 
                                0x0A06, 
                                0x0A16, 
                                0x0A1E, 
                                0x0A22, 
                                0x0A26, 
                                0x0A2A, 
                                0x0A2B, 
                                0x0A2E, 
                                0x0D12, 
                                0x0D16, 
                                0x0D22, 
                                0x0D26, 
                                0x0D2A, 
                                0x0D36, 
                                0x1612, 
                                0x1616, 
                                0x161E, 
                                0x1622, 
                                0x1626, 
                                0x162A, 
                                0x162B, 
                                0x162D
                            }, MEQ, Local0, MTR, Zero, Zero)))
            {
                _UID = 0x0F
            }
            ElseIf ((Ones != Match (Package (0x1D)
                            {
                                0x1902, 
                                0x1906, 
                                0x190B, 
                                0x1912, 
                                0x1916, 
                                0x191B, 
                                0x191D, 
                                0x191E, 
                                0x1921, 
                                0x1923, 
                                0x1926, 
                                0x1927, 
                                0x192B, 
                                0x192D, 
                                0x1932, 
                                0x193A, 
                                0x193B, 
                                0x5902, 
                                0x5912, 
                                0x5916, 
                                0x5917, 
                                0x591B, 
                                0x591C, 
                                0x591D, 
                                0x591E, 
                                0x5923, 
                                0x5926, 
                                0x5927, 
                                0x87C0
                            }, MEQ, Local0, MTR, Zero, Zero)))
            {
                _UID = 0x10
            }
            Else
            {
                _UID = 0x13
            }
        }
    }

    Device (MEM2)
    {
        Name (_HID, EisaId ("PNP0C01") /* System Board */)  // _HID: Hardware ID
        Name (_UID, 0x02)  // _UID: Unique ID
        Name (CRS, ResourceTemplate ()
        {
            Memory32Fixed (ReadWrite,
                0x20000000,         // Address Base
                0x00200000,         // Address Length
                )
            Memory32Fixed (ReadWrite,
                0x40000000,         // Address Base
                0x00200000,         // Address Length
                )
        })
        Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
        {
            Return (CRS) /* \MEM2.CRS_ */
        }

        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (_OSI ("Darwin"))
            {
                Return (0x0F)
            }
            Else
            {
                Return (Zero)
            }
        }
    }

    Name (\_SB.PCI0.LPCB.HPET._CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
    {
        IRQNoFlags ()
            {0,8,11}
        Memory32Fixed (ReadWrite,
            0xFED00000,         // Address Base
            0x00000400,         // Address Length
            )
    })
    Method (GPRW, 2, NotSerialized)
    {
        If (_OSI ("Darwin"))
        {
            If ((0x6D == Arg0))
            {
                Return (Package (0x02)
                {
                    0x6D, 
                    Zero
                })
            }

            If ((0x0D == Arg0))
            {
                Return (Package (0x02)
                {
                    0x0D, 
                    Zero
                })
            }
        }

        Return (XPRW (Arg0, Arg1))
    }

    Device (ANKD)
    {
        Name (_HID, "ANKD0000")  // _HID: Hardware ID
        Name (UCFC, One)
    }

    Device (SMCD)
    {
        Name (_HID, "FAN0000")  // _HID: Hardware ID
        Name (TEMP, Package (0x02)
        {
            "CPU Heatsink", 
            "TCPU"
        })
        Method (FAN0, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ST83 (Zero)
                If ((Local0 == 0xFF))
                {
                    Return (Local0)
                }

                Local0 = \_SB.PCI0.LPCB.EC0.TACH (Zero)
            }
            Else
            {
                Local0 = Zero
            }

            Return (Local0)
        }

        Method (TCPU, 0, NotSerialized)
        {
            If (\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Local0 = \_SB.PCI0.LPCB.EC0.ECPU /* External reference */
                Local1 = 0x3C
                If ((Local0 < 0x80))
                {
                    Local1 = Local0
                }
            }
            Else
            {
                Local1 = Zero
            }

            Return (Local1)
        }

        Name (FTA1, Package (0x16)
        {
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0xFF
        })
        Name (FTA2, Package (0x16)
        {
            Zero, 
            0x0A, 
            0x14, 
            0x1E, 
            0x28, 
            0x32, 
            0x3C, 
            0x46, 
            0x50, 
            0x5A, 
            0x64, 
            0x6E, 
            0x78, 
            0x82, 
            0x8C, 
            0xA0, 
            0xB9, 
            0xCD, 
            0xE1, 
            0xF5, 
            0xFA, 
            0xFF
        })
        Name (FCTU, 0x02)
        Name (FCTD, 0x05)
        Name (FHST, Buffer (0x16)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00               // ......
        })
        Name (FIDX, Zero)
        Name (FNUM, Zero)
        Name (FSUM, Zero)
        Name (FLST, 0xFF)
        Name (FCNT, Zero)
        Method (FCPU, 0, NotSerialized)
        {
            If ((\ANKD.UCFC == Zero))
            {
                Return (Zero)
            }

            If (!\_SB.PCI0.LPCB.EC0.ECAV ())
            {
                Return (Zero)
            }

            Local5 = \_SB.PCI0.LPCB.EC0.ECPU /* External reference */
            If ((Local5 < 0x80))
            {
                Local0 = Local5
            }
            Else
            {
                Local0 = 0x3C
            }

            Local1 = (Local0 + FSUM) /* \SMCD.FSUM */
            Local2 = FIDX /* \SMCD.FIDX */
            Local1 -= DerefOf (FHST [Local2])
            FHST [Local2] = Local0
            FSUM = Local1
            Local2++
            If ((Local2 >= SizeOf (FHST)))
            {
                Local2 = Zero
            }

            FIDX = Local2
            Local2 = FNUM /* \SMCD.FNUM */
            If ((Local2 != SizeOf (FHST)))
            {
                Local2++
                FNUM = Local2
            }

            Local0 = (Local1 / Local2)
            If ((Local0 > 0xFF))
            {
                Local0 = 0xFF
            }

            Local2 = Match (FTA1, MGE, Local0, MTR, Zero, Zero)
            If ((Local2 > FLST))
            {
                Local1 = (Local2 - FLST) /* \SMCD.FLST */
                Local4 = FCTU /* \SMCD.FCTU */
            }
            Else
            {
                Local1 = (FLST - Local2)
                Local4 = FCTD /* \SMCD.FCTD */
            }

            If (!Local1)
            {
                FCNT = Zero
            }
            Else
            {
                Local3 = FCNT /* \SMCD.FCNT */
                FCNT++
                Local1 = (Local4 / Local1)
                If ((Local3 >= Local1))
                {
                    FLST = Local2
                    Local5 = DerefOf (FTA2 [Local2])
                    \_SB.QFAN = Local5
                    \_SB.ATKD.QMOD (One)
                    FCNT = Zero
                }
            }

            Return (One)
        }
    }

    Scope (\_SB.PCI0.LPCB)
    {
        Device (EC)
        {
            Name (_HID, "ACID0001")  // _HID: Hardware ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Darwin"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Scope (_SB)
    {
        Method (LPS0, 0, NotSerialized)
        {
            If (_OSI ("Darwin"))
            {
                Return (One)
            }
        }
    }

    Scope (_GPE)
    {
        Method (LXEN, 0, NotSerialized)
        {
            If (_OSI ("Darwin"))
            {
                Return (One)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        OperationRegion (ERM2, EmbeddedControl, Zero, 0xFF)
        Field (ERM2, ByteAcc, NoLock, Preserve)
        {
            Offset (0x93), 
            TH00,   8, 
            TH01,   8, 
            TH10,   8, 
            TH11,   8, 
            Offset (0xC4), 
            XC30,   8, 
            XC31,   8, 
            Offset (0xE4), 
            YC30,   8, 
            YC31,   8, 
            Offset (0xF4), 
            B0S0,   8, 
            B0S1,   8, 
            Offset (0xFC), 
            B1S0,   8, 
            B1S1,   8
        }

        OperationRegion (RMB1, EmbeddedControl, 0x18, 0x28)
        Field (RMB1, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            BA00,   8, 
            BA01,   8, 
            BA02,   8, 
            BA03,   8, 
            BA04,   8, 
            BA05,   8, 
            BA06,   8, 
            BA07,   8, 
            BA08,   8, 
            BA09,   8, 
            BA0A,   8, 
            BA0B,   8, 
            BA0C,   8, 
            BA0D,   8, 
            BA0E,   8, 
            BA0F,   8, 
            BA10,   8, 
            BA11,   8, 
            BA12,   8, 
            BA13,   8, 
            BA14,   8, 
            BA15,   8, 
            BA16,   8, 
            BA17,   8, 
            BA18,   8, 
            BA19,   8, 
            BA1A,   8, 
            BA1B,   8, 
            BA1C,   8, 
            BA1D,   8, 
            BA1E,   8, 
            BA1F,   8
        }

        OperationRegion (RMB2, EmbeddedControl, 0x40, 0x28)
        Field (RMB2, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            BB00,   8, 
            BB01,   8, 
            BB02,   8, 
            BB03,   8, 
            BB04,   8, 
            BB05,   8, 
            BB06,   8, 
            BB07,   8, 
            BB08,   8, 
            BB09,   8, 
            BB0A,   8, 
            BB0B,   8, 
            BB0C,   8, 
            BB0D,   8, 
            BB0E,   8, 
            BB0F,   8, 
            BB10,   8, 
            BB11,   8, 
            BB12,   8, 
            BB13,   8, 
            BB14,   8, 
            BB15,   8, 
            BB16,   8, 
            BB17,   8, 
            BB18,   8, 
            BB19,   8, 
            BB1A,   8, 
            BB1B,   8, 
            BB1C,   8, 
            BB1D,   8, 
            BB1E,   8, 
            BB1F,   8
        }

        Field (RMB1, ByteAcc, NoLock, Preserve)
        {
            Offset (0x04), 
            T2B0,   8, 
            T2B1,   8
        }
    }

    Scope (_SB.PCI0)
    {
        Scope (BAT0)
        {
            Method (FBST, 4, NotSerialized)
            {
                Local1 = (Arg1 & 0xFFFF)
                Local0 = Zero
                If (^^LPCB.EC0.ACAP ())
                {
                    Local0 = One
                }

                If (Local0)
                {
                    If (CHGS (Zero))
                    {
                        Local0 = 0x02
                    }
                    Else
                    {
                        Local0 = Zero
                    }
                }
                Else
                {
                    Local0 = One
                }

                If (BLLO)
                {
                    Local2 = 0x04
                    Local0 |= Local2
                }

                If ((^^LPCB.EC0.EB0S & 0x08))
                {
                    Local2 = 0x04
                    Local0 |= Local2
                }

                If ((Local1 >= 0x8000))
                {
                    Local1 = (0xFFFF - Local1)
                }

                Local2 = Arg2
                If ((PUNT == Zero))
                {
                    Local1 *= ^^LPCB.EC0.B0DV /* External reference */
                    Local2 *= 0x0A
                }

                Local3 = (Local0 & 0x02)
                If (!Local3)
                {
                    Local3 = (LFCC - Local2)
                    Divide (LFCC, 0xC8, Local4, Local5)
                    If ((Local3 < Local5))
                    {
                        Local2 = LFCC /* External reference */
                    }
                }
                Else
                {
                    Divide (LFCC, 0xC8, Local4, Local5)
                    Local4 = (LFCC - Local5)
                    If ((Local2 > Local4))
                    {
                        Local2 = Local4
                    }
                }

                If (!^^LPCB.EC0.ACAP ())
                {
                    Divide (Local2, MBLF, Local3, Local4)
                    If ((Local1 < Local4))
                    {
                        Local1 = Local4
                    }
                }

                PBST [Zero] = Local0
                PBST [One] = Local1
                PBST [0x02] = Local2
                PBST [0x03] = Arg3
            }

            Method (_BIX, 0, NotSerialized)  // _BIX: Battery Information Extended
            {
                If (!^^LPCB.EC0.BATP (Zero))
                {
                    Return (NBIX) /* External reference */
                }

                If ((^^LPCB.EC0.GBTT (Zero) == 0xFF))
                {
                    Return (NBIX) /* External reference */
                }

                _BIF ()
                BIXT [One] = DerefOf (PBIF [Zero])
                BIXT [0x02] = DerefOf (PBIF [One])
                BIXT [0x03] = DerefOf (PBIF [0x02])
                BIXT [0x04] = DerefOf (PBIF [0x03])
                BIXT [0x05] = DerefOf (PBIF [0x04])
                BIXT [0x06] = DerefOf (PBIF [0x05])
                BIXT [0x07] = DerefOf (PBIF [0x06])
                BIXT [0x0E] = DerefOf (PBIF [0x07])
                BIXT [0x0F] = DerefOf (PBIF [0x08])
                BIXT [0x10] = DerefOf (PBIF [0x09])
                BIXT [0x11] = DerefOf (PBIF [0x0A])
                BIXT [0x12] = DerefOf (PBIF [0x0B])
                BIXT [0x13] = DerefOf (PBIF [0x0C])
                If ((DerefOf (BIXT [One]) == One))
                {
                    BIXT [One] = Zero
                    Local0 = DerefOf (BIXT [0x05])
                    BIXT [0x02] = (DerefOf (BIXT [0x02]) * Local0)
                    BIXT [0x03] = (DerefOf (BIXT [0x03]) * Local0)
                    BIXT [0x06] = (DerefOf (BIXT [0x06]) * Local0)
                    BIXT [0x07] = (DerefOf (BIXT [0x07]) * Local0)
                    BIXT [0x0E] = (DerefOf (BIXT [0x0E]) * Local0)
                    BIXT [0x0F] = (DerefOf (BIXT [0x0F]) * Local0)
                    Divide (DerefOf (BIXT [0x02]), 0x03E8, Local0, BIXT [0x02])
                    Divide (DerefOf (BIXT [0x03]), 0x03E8, Local0, BIXT [0x03])
                    Divide (DerefOf (BIXT [0x06]), 0x03E8, Local0, BIXT [0x06])
                    Divide (DerefOf (BIXT [0x07]), 0x03E8, Local0, BIXT [0x07])
                    Divide (DerefOf (BIXT [0x0E]), 0x03E8, Local0, BIXT [0x0E])
                    Divide (DerefOf (BIXT [0x0F]), 0x03E8, Local0, BIXT [0x0F])
                }

                BIXT [0x08] = B1B2 (^^LPCB.EC0.XC30, ^^LPCB.EC0.XC31)
                BIXT [0x09] = 0x0001869F
                Return (BIXT) /* External reference */
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (BIFA, 0, NotSerialized)
        {
            If (ECAV ())
            {
                If (BSLF)
                {
                    Local0 = B1B2 (B1S0, B1S1)
                }
                Else
                {
                    Local0 = B1B2 (B0S0, B0S1)
                }
            }
            Else
            {
                Local0 = Ones
            }

            Return (Local0)
        }

        Method (SMBR, 3, Serialized)
        {
            Local0 = Package (0x03)
                {
                    0x07, 
                    Zero, 
                    Zero
                }
            If (!ECAV ())
            {
                Return (Local0)
            }

            If ((Arg0 != RDBL))
            {
                If ((Arg0 != RDWD))
                {
                    If ((Arg0 != RDBT))
                    {
                        If ((Arg0 != RCBT))
                        {
                            If ((Arg0 != RDQK))
                            {
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            Acquire (MUEC, 0xFFFF)
            Local1 = PRTC /* External reference */
            Local2 = Zero
            While ((Local1 != Zero))
            {
                Stall (0x0A)
                Local2++
                If ((Local2 > 0x03E8))
                {
                    Local0 [Zero] = SBBY /* External reference */
                    Local1 = Zero
                }
                Else
                {
                    Local1 = PRTC /* External reference */
                }
            }

            If ((Local2 <= 0x03E8))
            {
                Local3 = (Arg1 << One)
                Local3 |= One
                ADDR = Local3
                If ((Arg0 != RDQK))
                {
                    If ((Arg0 != RCBT))
                    {
                        CMDB = Arg2
                    }
                }

                WRBA (Zero)
                PRTC = Arg0
                Local0 [Zero] = SWTC (Arg0)
                If ((DerefOf (Local0 [Zero]) == Zero))
                {
                    If ((Arg0 == RDBL))
                    {
                        Local0 [One] = BCNT /* External reference */
                        Local0 [0x02] = RDBA ()
                    }

                    If ((Arg0 == RDWD))
                    {
                        Local0 [One] = 0x02
                        Local0 [0x02] = B1B2 (T2B0, T2B1)
                    }

                    If ((Arg0 == RDBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = DAT0 /* External reference */
                    }

                    If ((Arg0 == RCBT))
                    {
                        Local0 [One] = One
                        Local0 [0x02] = DAT0 /* External reference */
                    }
                }
            }

            Release (MUEC)
            Return (Local0)
        }

        Method (SMBW, 5, Serialized)
        {
            Local0 = Package (0x01)
                {
                    0x07
                }
            If (!ECAV ())
            {
                Return (Local0)
            }

            If ((Arg0 != WRBL))
            {
                If ((Arg0 != WRWD))
                {
                    If ((Arg0 != WRBT))
                    {
                        If ((Arg0 != SDBT))
                        {
                            If ((Arg0 != WRQK))
                            {
                                Return (Local0)
                            }
                        }
                    }
                }
            }

            Acquire (MUEC, 0xFFFF)
            Local1 = PRTC /* External reference */
            Local2 = Zero
            While ((Local1 != Zero))
            {
                Stall (0x0A)
                Local2++
                If ((Local2 > 0x03E8))
                {
                    Local0 [Zero] = SBBY /* External reference */
                    Local1 = Zero
                }
                Else
                {
                    Local1 = PRTC /* External reference */
                }
            }

            If ((Local2 <= 0x03E8))
            {
                WRBA (Zero)
                Local3 = (Arg1 << One)
                ADDR = Local3
                If ((Arg0 != WRQK))
                {
                    If ((Arg0 != SDBT))
                    {
                        CMDB = Arg2
                    }
                }

                If ((Arg0 == WRBL))
                {
                    BCNT = Arg3
                    WRBA (Arg4)
                }

                If ((Arg0 == WRWD))
                {
                    T2B0 = Arg4
                    T2B1 = (Arg4 >> 0x08)
                }

                If ((Arg0 == WRBT))
                {
                    DAT0 = Arg4
                }

                If ((Arg0 == SDBT))
                {
                    DAT0 = Arg4
                }

                PRTC = Arg0
                Local0 [Zero] = SWTC (Arg0)
            }

            Release (MUEC)
            Return (Local0)
        }

        Method (ECSB, 7, NotSerialized)
        {
            Local1 = Package (0x05)
                {
                    0x11, 
                    Zero, 
                    Zero, 
                    Zero, 
                    Buffer (0x20){}
                }
            If ((Arg0 > One))
            {
                Return (Local1)
            }

            If (ECAV ())
            {
                Acquire (MUEC, 0xFFFF)
                If ((Arg0 == Zero))
                {
                    Local0 = PRTC /* External reference */
                }
                Else
                {
                    Local0 = PRT2 /* External reference */
                }

                Local2 = Zero
                While ((Local0 != Zero))
                {
                    Stall (0x0A)
                    Local2++
                    If ((Local2 > 0x03E8))
                    {
                        Local1 [Zero] = SBBY /* External reference */
                        Local0 = Zero
                    }
                    ElseIf ((Arg0 == Zero))
                    {
                        Local0 = PRTC /* External reference */
                    }
                    Else
                    {
                        Local0 = PRT2 /* External reference */
                    }
                }

                If ((Local2 <= 0x03E8))
                {
                    If ((Arg0 == Zero))
                    {
                        ADDR = Arg2
                        CMDB = Arg3
                        If (((Arg1 == 0x0A) || (Arg1 == 0x0B)))
                        {
                            BCNT = DerefOf (Arg6 [Zero])
                            WRBA (DerefOf (Arg6 [One]))
                        }
                        Else
                        {
                            DAT0 = Arg4
                            DAT1 = Arg5
                        }

                        PRTC = Arg1
                    }
                    Else
                    {
                        ADD2 = Arg2
                        CMD2 = Arg3
                        If (((Arg1 == 0x0A) || (Arg1 == 0x0B)))
                        {
                            BCN2 = DerefOf (Arg6 [Zero])
                            WRBB (DerefOf (Arg6 [One]))
                        }
                        Else
                        {
                            DA20 = Arg4
                            DA21 = Arg5
                        }

                        PRT2 = Arg1
                    }

                    Local0 = 0x7F
                    If ((Arg0 == Zero))
                    {
                        While (PRTC)
                        {
                            Sleep (One)
                            Local0--
                        }
                    }
                    Else
                    {
                        While (PRT2)
                        {
                            Sleep (One)
                            Local0--
                        }
                    }

                    If (Local0)
                    {
                        If ((Arg0 == Zero))
                        {
                            Local0 = SSTS /* External reference */
                            Local1 [One] = DAT0 /* External reference */
                            Local1 [0x02] = DAT1 /* External reference */
                            Local1 [0x03] = BCNT /* External reference */
                            Local1 [0x04] = RDBA ()
                        }
                        Else
                        {
                            Local0 = SST2 /* External reference */
                            Local1 [One] = DA20 /* External reference */
                            Local1 [0x02] = DA21 /* External reference */
                            Local1 [0x03] = BCN2 /* External reference */
                            Local1 [0x04] = RDBB ()
                        }

                        Local0 &= 0x1F
                        If (Local0)
                        {
                            Local0 += 0x10
                        }

                        Local1 [Zero] = Local0
                    }
                    Else
                    {
                        Local1 [Zero] = 0x10
                    }
                }

                Release (MUEC)
            }

            Return (Local1)
        }

        Method (TACH, 1, Serialized)
        {
            If (ECAV ())
            {
                Switch (Arg0)
                {
                    Case (Zero)
                    {
                        Local0 = B1B2 (TH00, TH01)
                        Break
                    }
                    Case (One)
                    {
                        Local0 = B1B2 (TH10, TH11)
                        Break
                    }
                    Default
                    {
                        Return (Ones)
                    }

                }

                Local0 *= 0x02
                If ((Local0 != Zero))
                {
                    Divide (0x0041CDB4, Local0, Local1, Local0)
                    Return (Local0)
                }
                Else
                {
                    Return (Ones)
                }
            }
            Else
            {
                Return (Ones)
            }
        }
    }

    Method (B1B2, 2, NotSerialized)
    {
        Return ((Arg0 | (Arg1 << 0x08)))
    }

    Scope (_SB.PCI0.LPCB)
    {
        Scope (EC0)
        {
            Method (RDBA, 0, Serialized)
            {
                Name (TEMP, Buffer (0x20){})
                TEMP [Zero] = BA00 /* \_SB_.PCI0.LPCB.EC0_.BA00 */
                TEMP [One] = BA01 /* \_SB_.PCI0.LPCB.EC0_.BA01 */
                TEMP [0x02] = BA02 /* \_SB_.PCI0.LPCB.EC0_.BA02 */
                TEMP [0x03] = BA03 /* \_SB_.PCI0.LPCB.EC0_.BA03 */
                TEMP [0x04] = BA04 /* \_SB_.PCI0.LPCB.EC0_.BA04 */
                TEMP [0x05] = BA05 /* \_SB_.PCI0.LPCB.EC0_.BA05 */
                TEMP [0x06] = BA06 /* \_SB_.PCI0.LPCB.EC0_.BA06 */
                TEMP [0x07] = BA07 /* \_SB_.PCI0.LPCB.EC0_.BA07 */
                TEMP [0x08] = BA08 /* \_SB_.PCI0.LPCB.EC0_.BA08 */
                TEMP [0x09] = BA09 /* \_SB_.PCI0.LPCB.EC0_.BA09 */
                TEMP [0x0A] = BA0A /* \_SB_.PCI0.LPCB.EC0_.BA0A */
                TEMP [0x0B] = BA0B /* \_SB_.PCI0.LPCB.EC0_.BA0B */
                TEMP [0x0C] = BA0C /* \_SB_.PCI0.LPCB.EC0_.BA0C */
                TEMP [0x0D] = BA0D /* \_SB_.PCI0.LPCB.EC0_.BA0D */
                TEMP [0x0E] = BA0E /* \_SB_.PCI0.LPCB.EC0_.BA0E */
                TEMP [0x0F] = BA0F /* \_SB_.PCI0.LPCB.EC0_.BA0F */
                TEMP [0x10] = BA10 /* \_SB_.PCI0.LPCB.EC0_.BA10 */
                TEMP [0x11] = BA11 /* \_SB_.PCI0.LPCB.EC0_.BA11 */
                TEMP [0x12] = BA12 /* \_SB_.PCI0.LPCB.EC0_.BA12 */
                TEMP [0x13] = BA13 /* \_SB_.PCI0.LPCB.EC0_.BA13 */
                TEMP [0x14] = BA14 /* \_SB_.PCI0.LPCB.EC0_.BA14 */
                TEMP [0x15] = BA15 /* \_SB_.PCI0.LPCB.EC0_.BA15 */
                TEMP [0x16] = BA16 /* \_SB_.PCI0.LPCB.EC0_.BA16 */
                TEMP [0x17] = BA17 /* \_SB_.PCI0.LPCB.EC0_.BA17 */
                TEMP [0x18] = BA18 /* \_SB_.PCI0.LPCB.EC0_.BA18 */
                TEMP [0x19] = BA19 /* \_SB_.PCI0.LPCB.EC0_.BA19 */
                TEMP [0x1A] = BA1A /* \_SB_.PCI0.LPCB.EC0_.BA1A */
                TEMP [0x1B] = BA1B /* \_SB_.PCI0.LPCB.EC0_.BA1B */
                TEMP [0x1C] = BA1C /* \_SB_.PCI0.LPCB.EC0_.BA1C */
                TEMP [0x1D] = BA1D /* \_SB_.PCI0.LPCB.EC0_.BA1D */
                TEMP [0x1E] = BA1E /* \_SB_.PCI0.LPCB.EC0_.BA1E */
                TEMP [0x1F] = BA1F /* \_SB_.PCI0.LPCB.EC0_.BA1F */
                Return (TEMP) /* \_SB_.PCI0.LPCB.EC0_.RDBA.TEMP */
            }

            Method (WRBA, 1, Serialized)
            {
                Name (TEMP, Buffer (0x20){})
                TEMP = Arg0
                BA00 = DerefOf (TEMP [Zero])
                BA01 = DerefOf (TEMP [One])
                BA02 = DerefOf (TEMP [0x02])
                BA03 = DerefOf (TEMP [0x03])
                BA04 = DerefOf (TEMP [0x04])
                BA05 = DerefOf (TEMP [0x05])
                BA06 = DerefOf (TEMP [0x06])
                BA07 = DerefOf (TEMP [0x07])
                BA08 = DerefOf (TEMP [0x08])
                BA09 = DerefOf (TEMP [0x09])
                BA0A = DerefOf (TEMP [0x0A])
                BA0B = DerefOf (TEMP [0x0B])
                BA0C = DerefOf (TEMP [0x0C])
                BA0D = DerefOf (TEMP [0x0D])
                BA0E = DerefOf (TEMP [0x0E])
                BA0F = DerefOf (TEMP [0x0F])
                BA10 = DerefOf (TEMP [0x10])
                BA11 = DerefOf (TEMP [0x11])
                BA12 = DerefOf (TEMP [0x12])
                BA13 = DerefOf (TEMP [0x13])
                BA14 = DerefOf (TEMP [0x14])
                BA15 = DerefOf (TEMP [0x15])
                BA16 = DerefOf (TEMP [0x16])
                BA17 = DerefOf (TEMP [0x17])
                BA18 = DerefOf (TEMP [0x18])
                BA19 = DerefOf (TEMP [0x19])
                BA1A = DerefOf (TEMP [0x1A])
                BA1B = DerefOf (TEMP [0x1B])
                BA1C = DerefOf (TEMP [0x1C])
                BA1D = DerefOf (TEMP [0x1D])
                BA1E = DerefOf (TEMP [0x1E])
                BA1F = DerefOf (TEMP [0x1F])
            }

            Method (RDBB, 0, Serialized)
            {
                Name (TEMP, Buffer (0x20){})
                TEMP [Zero] = BB00 /* \_SB_.PCI0.LPCB.EC0_.BB00 */
                TEMP [One] = BB01 /* \_SB_.PCI0.LPCB.EC0_.BB01 */
                TEMP [0x02] = BB02 /* \_SB_.PCI0.LPCB.EC0_.BB02 */
                TEMP [0x03] = BB03 /* \_SB_.PCI0.LPCB.EC0_.BB03 */
                TEMP [0x04] = BB04 /* \_SB_.PCI0.LPCB.EC0_.BB04 */
                TEMP [0x05] = BB05 /* \_SB_.PCI0.LPCB.EC0_.BB05 */
                TEMP [0x06] = BB06 /* \_SB_.PCI0.LPCB.EC0_.BB06 */
                TEMP [0x07] = BB07 /* \_SB_.PCI0.LPCB.EC0_.BB07 */
                TEMP [0x08] = BB08 /* \_SB_.PCI0.LPCB.EC0_.BB08 */
                TEMP [0x09] = BB09 /* \_SB_.PCI0.LPCB.EC0_.BB09 */
                TEMP [0x0A] = BB0A /* \_SB_.PCI0.LPCB.EC0_.BB0A */
                TEMP [0x0B] = BB0B /* \_SB_.PCI0.LPCB.EC0_.BB0B */
                TEMP [0x0C] = BB0C /* \_SB_.PCI0.LPCB.EC0_.BB0C */
                TEMP [0x0D] = BB0D /* \_SB_.PCI0.LPCB.EC0_.BB0D */
                TEMP [0x0E] = BB0E /* \_SB_.PCI0.LPCB.EC0_.BB0E */
                TEMP [0x0F] = BB0F /* \_SB_.PCI0.LPCB.EC0_.BB0F */
                TEMP [0x10] = BB10 /* \_SB_.PCI0.LPCB.EC0_.BB10 */
                TEMP [0x11] = BB11 /* \_SB_.PCI0.LPCB.EC0_.BB11 */
                TEMP [0x12] = BB12 /* \_SB_.PCI0.LPCB.EC0_.BB12 */
                TEMP [0x13] = BB13 /* \_SB_.PCI0.LPCB.EC0_.BB13 */
                TEMP [0x14] = BB14 /* \_SB_.PCI0.LPCB.EC0_.BB14 */
                TEMP [0x15] = BB15 /* \_SB_.PCI0.LPCB.EC0_.BB15 */
                TEMP [0x16] = BB16 /* \_SB_.PCI0.LPCB.EC0_.BB16 */
                TEMP [0x17] = BB17 /* \_SB_.PCI0.LPCB.EC0_.BB17 */
                TEMP [0x18] = BB18 /* \_SB_.PCI0.LPCB.EC0_.BB18 */
                TEMP [0x19] = BB19 /* \_SB_.PCI0.LPCB.EC0_.BB19 */
                TEMP [0x1A] = BB1A /* \_SB_.PCI0.LPCB.EC0_.BB1A */
                TEMP [0x1B] = BB1B /* \_SB_.PCI0.LPCB.EC0_.BB1B */
                TEMP [0x1C] = BB1C /* \_SB_.PCI0.LPCB.EC0_.BB1C */
                TEMP [0x1D] = BB1D /* \_SB_.PCI0.LPCB.EC0_.BB1D */
                TEMP [0x1E] = BB1E /* \_SB_.PCI0.LPCB.EC0_.BB1E */
                TEMP [0x1F] = BB1F /* \_SB_.PCI0.LPCB.EC0_.BB1F */
                Return (TEMP) /* \_SB_.PCI0.LPCB.EC0_.RDBB.TEMP */
            }

            Method (WRBB, 1, Serialized)
            {
                Name (TEMP, Buffer (0x20){})
                TEMP = Arg0
                BB00 = DerefOf (TEMP [Zero])
                BB01 = DerefOf (TEMP [One])
                BB02 = DerefOf (TEMP [0x02])
                BB03 = DerefOf (TEMP [0x03])
                BB04 = DerefOf (TEMP [0x04])
                BB05 = DerefOf (TEMP [0x05])
                BB06 = DerefOf (TEMP [0x06])
                BB07 = DerefOf (TEMP [0x07])
                BB08 = DerefOf (TEMP [0x08])
                BB09 = DerefOf (TEMP [0x09])
                BB0A = DerefOf (TEMP [0x0A])
                BB0B = DerefOf (TEMP [0x0B])
                BB0C = DerefOf (TEMP [0x0C])
                BB0D = DerefOf (TEMP [0x0D])
                BB0E = DerefOf (TEMP [0x0E])
                BB0F = DerefOf (TEMP [0x0F])
                BB10 = DerefOf (TEMP [0x10])
                BB11 = DerefOf (TEMP [0x11])
                BB12 = DerefOf (TEMP [0x12])
                BB13 = DerefOf (TEMP [0x13])
                BB14 = DerefOf (TEMP [0x14])
                BB15 = DerefOf (TEMP [0x15])
                BB16 = DerefOf (TEMP [0x16])
                BB17 = DerefOf (TEMP [0x17])
                BB18 = DerefOf (TEMP [0x18])
                BB19 = DerefOf (TEMP [0x19])
                BB1A = DerefOf (TEMP [0x1A])
                BB1B = DerefOf (TEMP [0x1B])
                BB1C = DerefOf (TEMP [0x1C])
                BB1D = DerefOf (TEMP [0x1D])
                BB1E = DerefOf (TEMP [0x1E])
                BB1F = DerefOf (TEMP [0x1F])
            }
        }
    }

    Scope (_SB)
    {
        Device (ALS0)
        {
            Name (_HID, "ACPI0008" /* Ambient Light Sensor Device */)  // _HID: Hardware ID
            Name (_CID, "smc-als")  // _CID: Compatible ID
            Name (_ALI, 0x012C)  // _ALI: Ambient Light Illuminance
            Name (_ALR, Package (0x01)  // _ALR: Ambient Light Response
            {
                Package (0x02)
                {
                    0x64, 
                    0x012C
                }
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                If (_OSI ("Darwin"))
                {
                    Return (0x0F)
                }
                Else
                {
                    Return (Zero)
                }
            }
        }
    }

    Device (_SB.AC0.ACAP)
    {
        Name (_HID, "FAN00000")  // _HID: Hardware ID
        Name (LPSR, Ones)
        Method (FCPU, 0, NotSerialized)
        {
            Local0 = \_SB.AC0._PSR ()
            If ((Local0 != LPSR))
            {
                LPSR = Local0
                Notify (\_SB.AC0, 0x80) // Status Change
            }
        }
    }

    Scope (\_SB.PCI0.AC0)
    {
        If (_OSI ("Darwin"))
        {
            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x18, 
                0x03
            })
        }
    }

    Scope (\_PR.CPU0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Debug = "ssdtPRGen version.....: 21.5 / Mac OS X 10.15.7 (19H1615)"
            Debug = "custom mode...........: 0"
            Debug = "host processor........: Intel(R) Core(TM) i3-5005U CPU @ 2.00GHz"
            Debug = "target processor......: i3-5005U"
            Debug = "number of processors..: 1"
            Debug = "baseFrequency.........: 500"
            Debug = "frequency.............: 2000"
            Debug = "busFrequency..........: 100"
            Debug = "logicalCPUs...........: 4"
            Debug = "maximum TDP...........: 15"
            Debug = "packageLength.........: 16"
            Debug = "turboStates...........: 0"
            Debug = "maxTurboFrequency.....: 2000"
            Debug = "machdep.xcpm.mode.....: 1"
        }

        Name (APLF, Zero)
        Name (APSN, Zero)
        Name (APSS, Package (0x10)
        {
            Package (0x06)
            {
                0x07D0, 
                0x3A98, 
                0x0A, 
                0x0A, 
                0x1400, 
                0x1400
            }, 

            Package (0x06)
            {
                0x076C, 
                0x3708, 
                0x0A, 
                0x0A, 
                0x1300, 
                0x1300
            }, 

            Package (0x06)
            {
                0x0708, 
                0x338A, 
                0x0A, 
                0x0A, 
                0x1200, 
                0x1200
            }, 

            Package (0x06)
            {
                0x06A4, 
                0x301F, 
                0x0A, 
                0x0A, 
                0x1100, 
                0x1100
            }, 

            Package (0x06)
            {
                0x0640, 
                0x2CC4, 
                0x0A, 
                0x0A, 
                0x1000, 
                0x1000
            }, 

            Package (0x06)
            {
                0x05DC, 
                0x297B, 
                0x0A, 
                0x0A, 
                0x0F00, 
                0x0F00
            }, 

            Package (0x06)
            {
                0x0578, 
                0x2644, 
                0x0A, 
                0x0A, 
                0x0E00, 
                0x0E00
            }, 

            Package (0x06)
            {
                0x0514, 
                0x231D, 
                0x0A, 
                0x0A, 
                0x0D00, 
                0x0D00
            }, 

            Package (0x06)
            {
                0x04B0, 
                0x2008, 
                0x0A, 
                0x0A, 
                0x0C00, 
                0x0C00
            }, 

            Package (0x06)
            {
                0x044C, 
                0x1D03, 
                0x0A, 
                0x0A, 
                0x0B00, 
                0x0B00
            }, 

            Package (0x06)
            {
                0x03E8, 
                0x1A0F, 
                0x0A, 
                0x0A, 
                0x0A00, 
                0x0A00
            }, 

            Package (0x06)
            {
                0x0384, 
                0x172C, 
                0x0A, 
                0x0A, 
                0x0900, 
                0x0900
            }, 

            Package (0x06)
            {
                0x0320, 
                0x1459, 
                0x0A, 
                0x0A, 
                0x0800, 
                0x0800
            }, 

            Package (0x06)
            {
                0x02BC, 
                0x1197, 
                0x0A, 
                0x0A, 
                0x0700, 
                0x0700
            }, 

            Package (0x06)
            {
                0x0258, 
                0x0EE4, 
                0x0A, 
                0x0A, 
                0x0600, 
                0x0600
            }, 

            Package (0x06)
            {
                0x01F4, 
                0x0C42, 
                0x0A, 
                0x0A, 
                0x0500, 
                0x0500
            }
        })
        Method (ACST, 0, NotSerialized)
        {
            Debug = "Method _PR_.CPU0.ACST Called"
            Debug = "CPU0 C-States    : 29"
            Return (Package (0x06)
            {
                One, 
                0x04, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000000, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    One, 
                    Zero, 
                    0x03E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x03, 
                    0xCD, 
                    0x01F4
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000020, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x06, 
                    0xF5, 
                    0x015E
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000030, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x07, 
                    0xF5, 
                    0xC8
                }
            })
        }

        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            Debug = "Method _PR_.CPU0._DSM Called"
            If ((Arg2 == Zero))
            {
                Return (Buffer (One)
                {
                     0x03                                             // .
                })
            }

            Return (Package (0x04)
            {
                "plugin-type", 
                One, 
                "cf-frequency-data", 
                Buffer (0x265E)
                {
                    /* 0000 */  0x2F, 0x2A, 0x0A, 0x20, 0x2A, 0x20, 0x49, 0x6E,  // /*. * In
                    /* 0008 */  0x74, 0x65, 0x6C, 0x20, 0x41, 0x43, 0x50, 0x49,  // tel ACPI
                    /* 0010 */  0x20, 0x43, 0x6F, 0x6D, 0x70, 0x6F, 0x6E, 0x65,  //  Compone
                    /* 0018 */  0x6E, 0x74, 0x20, 0x41, 0x72, 0x63, 0x68, 0x69,  // nt Archi
                    /* 0020 */  0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x0A,  // tecture.
                    /* 0028 */  0x20, 0x2A, 0x20, 0x41, 0x4D, 0x4C, 0x20, 0x44,  //  * AML D
                    /* 0030 */  0x69, 0x73, 0x61, 0x73, 0x73, 0x65, 0x6D, 0x62,  // isassemb
                    /* 0038 */  0x6C, 0x65, 0x72, 0x20, 0x76, 0x65, 0x72, 0x73,  // ler vers
                    /* 0040 */  0x69, 0x6F, 0x6E, 0x20, 0x32, 0x30, 0x31, 0x34,  // ion 2014
                    /* 0048 */  0x30, 0x32, 0x31, 0x30, 0x2D, 0x30, 0x30, 0x20,  // 0210-00 
                    /* 0050 */  0x5B, 0x46, 0x65, 0x62, 0x20, 0x31, 0x30, 0x20,  // [Feb 10 
                    /* 0058 */  0x32, 0x30, 0x31, 0x34, 0x5D, 0x0A, 0x20, 0x2A,  // 2014]. *
                    /* 0060 */  0x20, 0x43, 0x6F, 0x70, 0x79, 0x72, 0x69, 0x67,  //  Copyrig
                    /* 0068 */  0x68, 0x74, 0x20, 0x28, 0x63, 0x29, 0x20, 0x32,  // ht (c) 2
                    /* 0070 */  0x30, 0x30, 0x30, 0x20, 0x2D, 0x20, 0x32, 0x30,  // 000 - 20
                    /* 0078 */  0x31, 0x34, 0x20, 0x49, 0x6E, 0x74, 0x65, 0x6C,  // 14 Intel
                    /* 0080 */  0x20, 0x43, 0x6F, 0x72, 0x70, 0x6F, 0x72, 0x61,  //  Corpora
                    /* 0088 */  0x74, 0x69, 0x6F, 0x6E, 0x0A, 0x20, 0x2A, 0x20,  // tion. * 
                    /* 0090 */  0x0A, 0x20, 0x2A, 0x20, 0x4F, 0x72, 0x69, 0x67,  // . * Orig
                    /* 0098 */  0x69, 0x6E, 0x61, 0x6C, 0x20, 0x54, 0x61, 0x62,  // inal Tab
                    /* 00A0 */  0x6C, 0x65, 0x20, 0x48, 0x65, 0x61, 0x64, 0x65,  // le Heade
                    /* 00A8 */  0x72, 0x3A, 0x0A, 0x20, 0x2A, 0x20, 0x20, 0x20,  // r:. *   
                    /* 00B0 */  0x20, 0x20, 0x53, 0x69, 0x67, 0x6E, 0x61, 0x74,  //   Signat
                    /* 00B8 */  0x75, 0x72, 0x65, 0x20, 0x20, 0x20, 0x20, 0x20,  // ure     
                    /* 00C0 */  0x20, 0x20, 0x20, 0x22, 0x53, 0x53, 0x44, 0x54,  //    "SSDT
                    /* 00C8 */  0x22, 0x0A, 0x20, 0x2A, 0x20, 0x20, 0x20, 0x20,  // ". *    
                    /* 00D0 */  0x20, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x20,  //  Length 
                    /* 00D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 00E0 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,  //   0x0000
                    /* 00E8 */  0x30, 0x33, 0x36, 0x41, 0x20, 0x28, 0x38, 0x37,  // 036A (87
                    /* 00F0 */  0x34, 0x29, 0x0A, 0x20, 0x2A, 0x20, 0x20, 0x20,  // 4). *   
                    /* 00F8 */  0x20, 0x20, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69,  //   Revisi
                    /* 0100 */  0x6F, 0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // on      
                    /* 0108 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x31, 0x0A,  //    0x01.
                    /* 0110 */  0x20, 0x2A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x43,  //  *     C
                    /* 0118 */  0x68, 0x65, 0x63, 0x6B, 0x73, 0x75, 0x6D, 0x20,  // hecksum 
                    /* 0120 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0128 */  0x30, 0x78, 0x30, 0x30, 0x0A, 0x20, 0x2A, 0x20,  // 0x00. * 
                    /* 0130 */  0x20, 0x20, 0x20, 0x20, 0x4F, 0x45, 0x4D, 0x20,  //     OEM 
                    /* 0138 */  0x49, 0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ID      
                    /* 0140 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x41, 0x50,  //      "AP
                    /* 0148 */  0x50, 0x4C, 0x45, 0x20, 0x22, 0x0A, 0x20, 0x2A,  // PLE ". *
                    /* 0150 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4F, 0x45, 0x4D,  //      OEM
                    /* 0158 */  0x20, 0x54, 0x61, 0x62, 0x6C, 0x65, 0x20, 0x49,  //  Table I
                    /* 0160 */  0x44, 0x20, 0x20, 0x20, 0x20, 0x20, 0x22, 0x43,  // D     "C
                    /* 0168 */  0x70, 0x75, 0x50, 0x6D, 0x22, 0x0A, 0x20, 0x2A,  // puPm". *
                    /* 0170 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4F, 0x45, 0x4D,  //      OEM
                    /* 0178 */  0x20, 0x52, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6F,  //  Revisio
                    /* 0180 */  0x6E, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  // n     0x
                    /* 0188 */  0x30, 0x30, 0x30, 0x32, 0x31, 0x35, 0x30, 0x30,  // 00021500
                    /* 0190 */  0x20, 0x28, 0x31, 0x33, 0x36, 0x34, 0x34, 0x38,  //  (136448
                    /* 0198 */  0x29, 0x0A, 0x20, 0x2A, 0x20, 0x20, 0x20, 0x20,  // ). *    
                    /* 01A0 */  0x20, 0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65,  //  Compile
                    /* 01A8 */  0x72, 0x20, 0x49, 0x44, 0x20, 0x20, 0x20, 0x20,  // r ID    
                    /* 01B0 */  0x20, 0x20, 0x22, 0x49, 0x4E, 0x54, 0x4C, 0x22,  //   "INTL"
                    /* 01B8 */  0x0A, 0x20, 0x2A, 0x20, 0x20, 0x20, 0x20, 0x20,  // . *     
                    /* 01C0 */  0x43, 0x6F, 0x6D, 0x70, 0x69, 0x6C, 0x65, 0x72,  // Compiler
                    /* 01C8 */  0x20, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E,  //  Version
                    /* 01D0 */  0x20, 0x30, 0x78, 0x32, 0x30, 0x31, 0x34, 0x30,  //  0x20140
                    /* 01D8 */  0x32, 0x31, 0x30, 0x20, 0x28, 0x35, 0x33, 0x38,  // 210 (538
                    /* 01E0 */  0x31, 0x38, 0x32, 0x31, 0x36, 0x30, 0x29, 0x0A,  // 182160).
                    /* 01E8 */  0x20, 0x2A, 0x2F, 0x0A, 0x0A, 0x44, 0x65, 0x66,  //  */..Def
                    /* 01F0 */  0x69, 0x6E, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x42,  // initionB
                    /* 01F8 */  0x6C, 0x6F, 0x63, 0x6B, 0x20, 0x28, 0x22, 0x73,  // lock ("s
                    /* 0200 */  0x73, 0x64, 0x74, 0x2E, 0x61, 0x6D, 0x6C, 0x22,  // sdt.aml"
                    /* 0208 */  0x2C, 0x20, 0x22, 0x53, 0x53, 0x44, 0x54, 0x22,  // , "SSDT"
                    /* 0210 */  0x2C, 0x20, 0x31, 0x2C, 0x20, 0x22, 0x41, 0x50,  // , 1, "AP
                    /* 0218 */  0x50, 0x4C, 0x45, 0x20, 0x22, 0x2C, 0x20, 0x22,  // PLE ", "
                    /* 0220 */  0x43, 0x70, 0x75, 0x50, 0x6D, 0x22, 0x2C, 0x20,  // CpuPm", 
                    /* 0228 */  0x30, 0x78, 0x30, 0x30, 0x30, 0x32, 0x31, 0x35,  // 0x000215
                    /* 0230 */  0x30, 0x30, 0x29, 0x0A, 0x7B, 0x0A, 0x20, 0x20,  // 00).{.  
                    /* 0238 */  0x20, 0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6E,  //   Extern
                    /* 0240 */  0x61, 0x6C, 0x20, 0x28, 0x5C, 0x5F, 0x50, 0x52,  // al (\_PR
                    /* 0248 */  0x5F, 0x2E, 0x43, 0x50, 0x55, 0x30, 0x2C, 0x20,  // _.CPU0, 
                    /* 0250 */  0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4F, 0x62,  // DeviceOb
                    /* 0258 */  0x6A, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x45,  // j).    E
                    /* 0260 */  0x78, 0x74, 0x65, 0x72, 0x6E, 0x61, 0x6C, 0x20,  // xternal 
                    /* 0268 */  0x28, 0x5C, 0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43,  // (\_PR_.C
                    /* 0270 */  0x50, 0x55, 0x31, 0x2C, 0x20, 0x44, 0x65, 0x76,  // PU1, Dev
                    /* 0278 */  0x69, 0x63, 0x65, 0x4F, 0x62, 0x6A, 0x29, 0x0A,  // iceObj).
                    /* 0280 */  0x20, 0x20, 0x20, 0x20, 0x45, 0x78, 0x74, 0x65,  //     Exte
                    /* 0288 */  0x72, 0x6E, 0x61, 0x6C, 0x20, 0x28, 0x5C, 0x5F,  // rnal (\_
                    /* 0290 */  0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x32,  // PR_.CPU2
                    /* 0298 */  0x2C, 0x20, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65,  // , Device
                    /* 02A0 */  0x4F, 0x62, 0x6A, 0x29, 0x0A, 0x20, 0x20, 0x20,  // Obj).   
                    /* 02A8 */  0x20, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6E, 0x61,  //  Externa
                    /* 02B0 */  0x6C, 0x20, 0x28, 0x5C, 0x5F, 0x50, 0x52, 0x5F,  // l (\_PR_
                    /* 02B8 */  0x2E, 0x43, 0x50, 0x55, 0x33, 0x2C, 0x20, 0x44,  // .CPU3, D
                    /* 02C0 */  0x65, 0x76, 0x69, 0x63, 0x65, 0x4F, 0x62, 0x6A,  // eviceObj
                    /* 02C8 */  0x29, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x53,  // )..    S
                    /* 02D0 */  0x63, 0x6F, 0x70, 0x65, 0x20, 0x28, 0x5C, 0x5F,  // cope (\_
                    /* 02D8 */  0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x30,  // PR_.CPU0
                    /* 02E0 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  // ).    {.
                    /* 02E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 02F0 */  0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x20, 0x28,  // Method (
                    /* 02F8 */  0x5F, 0x49, 0x4E, 0x49, 0x2C, 0x20, 0x30, 0x2C,  // _INI, 0,
                    /* 0300 */  0x20, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x72, 0x69,  //  NotSeri
                    /* 0308 */  0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x29, 0x0A,  // alized).
                    /* 0310 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0318 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 0320 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74,  //       St
                    /* 0328 */  0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x73, 0x73,  // ore ("ss
                    /* 0330 */  0x64, 0x74, 0x50, 0x52, 0x47, 0x65, 0x6E, 0x20,  // dtPRGen 
                    /* 0338 */  0x76, 0x65, 0x72, 0x73, 0x69, 0x6F, 0x6E, 0x2E,  // version.
                    /* 0340 */  0x2E, 0x2E, 0x2E, 0x2E, 0x3A, 0x20, 0x32, 0x31,  // ....: 21
                    /* 0348 */  0x2E, 0x35, 0x20, 0x2F, 0x20, 0x4D, 0x61, 0x63,  // .5 / Mac
                    /* 0350 */  0x20, 0x4F, 0x53, 0x20, 0x58, 0x20, 0x31, 0x30,  //  OS X 10
                    /* 0358 */  0x2E, 0x31, 0x35, 0x2E, 0x37, 0x20, 0x28, 0x31,  // .15.7 (1
                    /* 0360 */  0x39, 0x48, 0x31, 0x36, 0x31, 0x35, 0x29, 0x22,  // 9H1615)"
                    /* 0368 */  0x2C, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x29,  // , Debug)
                    /* 0370 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0378 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x6F,  //      Sto
                    /* 0380 */  0x72, 0x65, 0x20, 0x28, 0x22, 0x63, 0x75, 0x73,  // re ("cus
                    /* 0388 */  0x74, 0x6F, 0x6D, 0x20, 0x6D, 0x6F, 0x64, 0x65,  // tom mode
                    /* 0390 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 0398 */  0x2E, 0x2E, 0x2E, 0x3A, 0x20, 0x30, 0x22, 0x2C,  // ...: 0",
                    /* 03A0 */  0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x29, 0x0A,  //  Debug).
                    /* 03A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 03B0 */  0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x6F, 0x72,  //     Stor
                    /* 03B8 */  0x65, 0x20, 0x28, 0x22, 0x68, 0x6F, 0x73, 0x74,  // e ("host
                    /* 03C0 */  0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,  //  process
                    /* 03C8 */  0x6F, 0x72, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // or......
                    /* 03D0 */  0x2E, 0x2E, 0x3A, 0x20, 0x49, 0x6E, 0x74, 0x65,  // ..: Inte
                    /* 03D8 */  0x6C, 0x28, 0x52, 0x29, 0x20, 0x43, 0x6F, 0x72,  // l(R) Cor
                    /* 03E0 */  0x65, 0x28, 0x54, 0x4D, 0x29, 0x20, 0x69, 0x33,  // e(TM) i3
                    /* 03E8 */  0x2D, 0x35, 0x30, 0x30, 0x35, 0x55, 0x20, 0x43,  // -5005U C
                    /* 03F0 */  0x50, 0x55, 0x20, 0x40, 0x20, 0x32, 0x2E, 0x30,  // PU @ 2.0
                    /* 03F8 */  0x30, 0x47, 0x48, 0x7A, 0x22, 0x2C, 0x20, 0x44,  // 0GHz", D
                    /* 0400 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 0408 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0410 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 0418 */  0x28, 0x22, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,  // ("target
                    /* 0420 */  0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73, 0x73,  //  process
                    /* 0428 */  0x6F, 0x72, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // or......
                    /* 0430 */  0x3A, 0x20, 0x69, 0x33, 0x2D, 0x35, 0x30, 0x30,  // : i3-500
                    /* 0438 */  0x35, 0x55, 0x22, 0x2C, 0x20, 0x44, 0x65, 0x62,  // 5U", Deb
                    /* 0440 */  0x75, 0x67, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ug).    
                    /* 0448 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0450 */  0x53, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22,  // Store ("
                    /* 0458 */  0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x6F,  // number o
                    /* 0460 */  0x66, 0x20, 0x70, 0x72, 0x6F, 0x63, 0x65, 0x73,  // f proces
                    /* 0468 */  0x73, 0x6F, 0x72, 0x73, 0x2E, 0x2E, 0x3A, 0x20,  // sors..: 
                    /* 0470 */  0x31, 0x22, 0x2C, 0x20, 0x44, 0x65, 0x62, 0x75,  // 1", Debu
                    /* 0478 */  0x67, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // g).     
                    /* 0480 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53,  //        S
                    /* 0488 */  0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x62,  // tore ("b
                    /* 0490 */  0x61, 0x73, 0x65, 0x46, 0x72, 0x65, 0x71, 0x75,  // aseFrequ
                    /* 0498 */  0x65, 0x6E, 0x63, 0x79, 0x2E, 0x2E, 0x2E, 0x2E,  // ency....
                    /* 04A0 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x3A, 0x20, 0x35,  // .....: 5
                    /* 04A8 */  0x30, 0x30, 0x22, 0x2C, 0x20, 0x44, 0x65, 0x62,  // 00", Deb
                    /* 04B0 */  0x75, 0x67, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ug).    
                    /* 04B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 04C0 */  0x53, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22,  // Store ("
                    /* 04C8 */  0x66, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6E, 0x63,  // frequenc
                    /* 04D0 */  0x79, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // y.......
                    /* 04D8 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x3A, 0x20,  // ......: 
                    /* 04E0 */  0x32, 0x30, 0x30, 0x30, 0x22, 0x2C, 0x20, 0x44,  // 2000", D
                    /* 04E8 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 04F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 04F8 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 0500 */  0x28, 0x22, 0x62, 0x75, 0x73, 0x46, 0x72, 0x65,  // ("busFre
                    /* 0508 */  0x71, 0x75, 0x65, 0x6E, 0x63, 0x79, 0x2E, 0x2E,  // quency..
                    /* 0510 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 0518 */  0x3A, 0x20, 0x31, 0x30, 0x30, 0x22, 0x2C, 0x20,  // : 100", 
                    /* 0520 */  0x44, 0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20,  // Debug). 
                    /* 0528 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0530 */  0x20, 0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65,  //    Store
                    /* 0538 */  0x20, 0x28, 0x22, 0x6C, 0x6F, 0x67, 0x69, 0x63,  //  ("logic
                    /* 0540 */  0x61, 0x6C, 0x43, 0x50, 0x55, 0x73, 0x2E, 0x2E,  // alCPUs..
                    /* 0548 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 0550 */  0x2E, 0x3A, 0x20, 0x34, 0x22, 0x2C, 0x20, 0x44,  // .: 4", D
                    /* 0558 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 0560 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0568 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 0570 */  0x28, 0x22, 0x6D, 0x61, 0x78, 0x69, 0x6D, 0x75,  // ("maximu
                    /* 0578 */  0x6D, 0x20, 0x54, 0x44, 0x50, 0x2E, 0x2E, 0x2E,  // m TDP...
                    /* 0580 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 0588 */  0x3A, 0x20, 0x31, 0x35, 0x22, 0x2C, 0x20, 0x44,  // : 15", D
                    /* 0590 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 0598 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 05A0 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 05A8 */  0x28, 0x22, 0x70, 0x61, 0x63, 0x6B, 0x61, 0x67,  // ("packag
                    /* 05B0 */  0x65, 0x4C, 0x65, 0x6E, 0x67, 0x74, 0x68, 0x2E,  // eLength.
                    /* 05B8 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 05C0 */  0x3A, 0x20, 0x31, 0x36, 0x22, 0x2C, 0x20, 0x44,  // : 16", D
                    /* 05C8 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 05D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 05D8 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 05E0 */  0x28, 0x22, 0x74, 0x75, 0x72, 0x62, 0x6F, 0x53,  // ("turboS
                    /* 05E8 */  0x74, 0x61, 0x74, 0x65, 0x73, 0x2E, 0x2E, 0x2E,  // tates...
                    /* 05F0 */  0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E,  // ........
                    /* 05F8 */  0x3A, 0x20, 0x30, 0x22, 0x2C, 0x20, 0x44, 0x65,  // : 0", De
                    /* 0600 */  0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20, 0x20,  // bug).   
                    /* 0608 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0610 */  0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x28,  //  Store (
                    /* 0618 */  0x22, 0x6D, 0x61, 0x78, 0x54, 0x75, 0x72, 0x62,  // "maxTurb
                    /* 0620 */  0x6F, 0x46, 0x72, 0x65, 0x71, 0x75, 0x65, 0x6E,  // oFrequen
                    /* 0628 */  0x63, 0x79, 0x2E, 0x2E, 0x2E, 0x2E, 0x2E, 0x3A,  // cy.....:
                    /* 0630 */  0x20, 0x32, 0x30, 0x30, 0x30, 0x22, 0x2C, 0x20,  //  2000", 
                    /* 0638 */  0x44, 0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20,  // Debug). 
                    /* 0640 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0648 */  0x20, 0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65,  //    Store
                    /* 0650 */  0x20, 0x28, 0x22, 0x6D, 0x61, 0x63, 0x68, 0x64,  //  ("machd
                    /* 0658 */  0x65, 0x70, 0x2E, 0x78, 0x63, 0x70, 0x6D, 0x2E,  // ep.xcpm.
                    /* 0660 */  0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x2E, 0x2E, 0x2E,  // mode....
                    /* 0668 */  0x2E, 0x3A, 0x20, 0x31, 0x22, 0x2C, 0x20, 0x44,  // .: 1", D
                    /* 0670 */  0x65, 0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20,  // ebug).  
                    /* 0678 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A,  //       }.
                    /* 0680 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0688 */  0x20, 0x4E, 0x61, 0x6D, 0x65, 0x20, 0x28, 0x41,  //  Name (A
                    /* 0690 */  0x50, 0x4C, 0x46, 0x2C, 0x20, 0x5A, 0x65, 0x72,  // PLF, Zer
                    /* 0698 */  0x6F, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // o).     
                    /* 06A0 */  0x20, 0x20, 0x20, 0x4E, 0x61, 0x6D, 0x65, 0x20,  //    Name 
                    /* 06A8 */  0x28, 0x41, 0x50, 0x53, 0x4E, 0x2C, 0x20, 0x5A,  // (APSN, Z
                    /* 06B0 */  0x65, 0x72, 0x6F, 0x29, 0x0A, 0x20, 0x20, 0x20,  // ero).   
                    /* 06B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4E, 0x61, 0x6D,  //      Nam
                    /* 06C0 */  0x65, 0x20, 0x28, 0x41, 0x50, 0x53, 0x53, 0x2C,  // e (APSS,
                    /* 06C8 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 06D0 */  0x20, 0x28, 0x30, 0x78, 0x31, 0x30, 0x29, 0x0A,  //  (0x10).
                    /* 06D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 06E0 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 06E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2A,  //       /*
                    /* 06F0 */  0x20, 0x48, 0x69, 0x67, 0x68, 0x20, 0x46, 0x72,  //  High Fr
                    /* 06F8 */  0x65, 0x71, 0x75, 0x65, 0x6E, 0x63, 0x79, 0x20,  // equency 
                    /* 0700 */  0x4D, 0x6F, 0x64, 0x65, 0x73, 0x20, 0x28, 0x6E,  // Modes (n
                    /* 0708 */  0x6F, 0x6E, 0x2D, 0x74, 0x75, 0x72, 0x62, 0x6F,  // on-turbo
                    /* 0710 */  0x29, 0x20, 0x2A, 0x2F, 0x0A, 0x20, 0x20, 0x20,  // ) */.   
                    /* 0718 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0720 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 0728 */  0x20, 0x28, 0x30, 0x78, 0x30, 0x36, 0x29, 0x20,  //  (0x06) 
                    /* 0730 */  0x7B, 0x20, 0x30, 0x78, 0x30, 0x37, 0x44, 0x30,  // { 0x07D0
                    /* 0738 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x30, 0x33, 0x41,  // , 0x003A
                    /* 0740 */  0x39, 0x38, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41,  // 98, 0x0A
                    /* 0748 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20,  // , 0x0A, 
                    /* 0750 */  0x30, 0x78, 0x31, 0x34, 0x30, 0x30, 0x2C, 0x20,  // 0x1400, 
                    /* 0758 */  0x30, 0x78, 0x31, 0x34, 0x30, 0x30, 0x20, 0x7D,  // 0x1400 }
                    /* 0760 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 0768 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61,  //       Pa
                    /* 0770 */  0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28, 0x30,  // ckage (0
                    /* 0778 */  0x78, 0x30, 0x36, 0x29, 0x20, 0x7B, 0x20, 0x30,  // x06) { 0
                    /* 0780 */  0x78, 0x30, 0x37, 0x36, 0x43, 0x2C, 0x20, 0x30,  // x076C, 0
                    /* 0788 */  0x78, 0x30, 0x30, 0x33, 0x37, 0x30, 0x38, 0x2C,  // x003708,
                    /* 0790 */  0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30,  //  0x0A, 0
                    /* 0798 */  0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x31,  // x0A, 0x1
                    /* 07A0 */  0x33, 0x30, 0x30, 0x2C, 0x20, 0x30, 0x78, 0x31,  // 300, 0x1
                    /* 07A8 */  0x33, 0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A, 0x20,  // 300 },. 
                    /* 07B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 07B8 */  0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,  //    Packa
                    /* 07C0 */  0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x36,  // ge (0x06
                    /* 07C8 */  0x29, 0x20, 0x7B, 0x20, 0x30, 0x78, 0x30, 0x37,  // ) { 0x07
                    /* 07D0 */  0x30, 0x38, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x30,  // 08, 0x00
                    /* 07D8 */  0x33, 0x33, 0x38, 0x41, 0x2C, 0x20, 0x30, 0x78,  // 338A, 0x
                    /* 07E0 */  0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41,  // 0A, 0x0A
                    /* 07E8 */  0x2C, 0x20, 0x30, 0x78, 0x31, 0x32, 0x30, 0x30,  // , 0x1200
                    /* 07F0 */  0x2C, 0x20, 0x30, 0x78, 0x31, 0x32, 0x30, 0x30,  // , 0x1200
                    /* 07F8 */  0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  },.    
                    /* 0800 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0808 */  0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20,  // Package 
                    /* 0810 */  0x28, 0x30, 0x78, 0x30, 0x36, 0x29, 0x20, 0x7B,  // (0x06) {
                    /* 0818 */  0x20, 0x30, 0x78, 0x30, 0x36, 0x41, 0x34, 0x2C,  //  0x06A4,
                    /* 0820 */  0x20, 0x30, 0x78, 0x30, 0x30, 0x33, 0x30, 0x31,  //  0x00301
                    /* 0828 */  0x46, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C,  // F, 0x0A,
                    /* 0830 */  0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30,  //  0x0A, 0
                    /* 0838 */  0x78, 0x31, 0x31, 0x30, 0x30, 0x2C, 0x20, 0x30,  // x1100, 0
                    /* 0840 */  0x78, 0x31, 0x31, 0x30, 0x30, 0x20, 0x7D, 0x2C,  // x1100 },
                    /* 0848 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0850 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63,  //      Pac
                    /* 0858 */  0x6B, 0x61, 0x67, 0x65, 0x20, 0x28, 0x30, 0x78,  // kage (0x
                    /* 0860 */  0x30, 0x36, 0x29, 0x20, 0x7B, 0x20, 0x30, 0x78,  // 06) { 0x
                    /* 0868 */  0x30, 0x36, 0x34, 0x30, 0x2C, 0x20, 0x30, 0x78,  // 0640, 0x
                    /* 0870 */  0x30, 0x30, 0x32, 0x43, 0x43, 0x34, 0x2C, 0x20,  // 002CC4, 
                    /* 0878 */  0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78,  // 0x0A, 0x
                    /* 0880 */  0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x31, 0x30,  // 0A, 0x10
                    /* 0888 */  0x30, 0x30, 0x2C, 0x20, 0x30, 0x78, 0x31, 0x30,  // 00, 0x10
                    /* 0890 */  0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20,  // 00 },.  
                    /* 0898 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 08A0 */  0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67,  //   Packag
                    /* 08A8 */  0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x36, 0x29,  // e (0x06)
                    /* 08B0 */  0x20, 0x7B, 0x20, 0x30, 0x78, 0x30, 0x35, 0x44,  //  { 0x05D
                    /* 08B8 */  0x43, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x30, 0x32,  // C, 0x002
                    /* 08C0 */  0x39, 0x37, 0x42, 0x2C, 0x20, 0x30, 0x78, 0x30,  // 97B, 0x0
                    /* 08C8 */  0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C,  // A, 0x0A,
                    /* 08D0 */  0x20, 0x30, 0x78, 0x30, 0x46, 0x30, 0x30, 0x2C,  //  0x0F00,
                    /* 08D8 */  0x20, 0x30, 0x78, 0x30, 0x46, 0x30, 0x30, 0x20,  //  0x0F00 
                    /* 08E0 */  0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // },.     
                    /* 08E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50,  //        P
                    /* 08F0 */  0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28,  // ackage (
                    /* 08F8 */  0x30, 0x78, 0x30, 0x36, 0x29, 0x20, 0x7B, 0x20,  // 0x06) { 
                    /* 0900 */  0x30, 0x78, 0x30, 0x35, 0x37, 0x38, 0x2C, 0x20,  // 0x0578, 
                    /* 0908 */  0x30, 0x78, 0x30, 0x30, 0x32, 0x36, 0x34, 0x34,  // 0x002644
                    /* 0910 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20,  // , 0x0A, 
                    /* 0918 */  0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78,  // 0x0A, 0x
                    /* 0920 */  0x30, 0x45, 0x30, 0x30, 0x2C, 0x20, 0x30, 0x78,  // 0E00, 0x
                    /* 0928 */  0x30, 0x45, 0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A,  // 0E00 },.
                    /* 0930 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0938 */  0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B,  //     Pack
                    /* 0940 */  0x61, 0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30,  // age (0x0
                    /* 0948 */  0x36, 0x29, 0x20, 0x7B, 0x20, 0x30, 0x78, 0x30,  // 6) { 0x0
                    /* 0950 */  0x35, 0x31, 0x34, 0x2C, 0x20, 0x30, 0x78, 0x30,  // 514, 0x0
                    /* 0958 */  0x30, 0x32, 0x33, 0x31, 0x44, 0x2C, 0x20, 0x30,  // 0231D, 0
                    /* 0960 */  0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x30,  // x0A, 0x0
                    /* 0968 */  0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x44, 0x30,  // A, 0x0D0
                    /* 0970 */  0x30, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x44, 0x30,  // 0, 0x0D0
                    /* 0978 */  0x30, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20,  // 0 },.   
                    /* 0980 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0988 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 0990 */  0x20, 0x28, 0x30, 0x78, 0x30, 0x36, 0x29, 0x20,  //  (0x06) 
                    /* 0998 */  0x7B, 0x20, 0x30, 0x78, 0x30, 0x34, 0x42, 0x30,  // { 0x04B0
                    /* 09A0 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x30, 0x32, 0x30,  // , 0x0020
                    /* 09A8 */  0x30, 0x38, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41,  // 08, 0x0A
                    /* 09B0 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20,  // , 0x0A, 
                    /* 09B8 */  0x30, 0x78, 0x30, 0x43, 0x30, 0x30, 0x2C, 0x20,  // 0x0C00, 
                    /* 09C0 */  0x30, 0x78, 0x30, 0x43, 0x30, 0x30, 0x20, 0x7D,  // 0x0C00 }
                    /* 09C8 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 09D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61,  //       Pa
                    /* 09D8 */  0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28, 0x30,  // ckage (0
                    /* 09E0 */  0x78, 0x30, 0x36, 0x29, 0x20, 0x7B, 0x20, 0x30,  // x06) { 0
                    /* 09E8 */  0x78, 0x30, 0x34, 0x34, 0x43, 0x2C, 0x20, 0x30,  // x044C, 0
                    /* 09F0 */  0x78, 0x30, 0x30, 0x31, 0x44, 0x30, 0x33, 0x2C,  // x001D03,
                    /* 09F8 */  0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30,  //  0x0A, 0
                    /* 0A00 */  0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x30,  // x0A, 0x0
                    /* 0A08 */  0x42, 0x30, 0x30, 0x2C, 0x20, 0x30, 0x78, 0x30,  // B00, 0x0
                    /* 0A10 */  0x42, 0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A, 0x20,  // B00 },. 
                    /* 0A18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0A20 */  0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,  //    Packa
                    /* 0A28 */  0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x36,  // ge (0x06
                    /* 0A30 */  0x29, 0x20, 0x7B, 0x20, 0x30, 0x78, 0x30, 0x33,  // ) { 0x03
                    /* 0A38 */  0x45, 0x38, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x30,  // E8, 0x00
                    /* 0A40 */  0x31, 0x41, 0x30, 0x46, 0x2C, 0x20, 0x30, 0x78,  // 1A0F, 0x
                    /* 0A48 */  0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41,  // 0A, 0x0A
                    /* 0A50 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x30, 0x30,  // , 0x0A00
                    /* 0A58 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x30, 0x30,  // , 0x0A00
                    /* 0A60 */  0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  },.    
                    /* 0A68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0A70 */  0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20,  // Package 
                    /* 0A78 */  0x28, 0x30, 0x78, 0x30, 0x36, 0x29, 0x20, 0x7B,  // (0x06) {
                    /* 0A80 */  0x20, 0x30, 0x78, 0x30, 0x33, 0x38, 0x34, 0x2C,  //  0x0384,
                    /* 0A88 */  0x20, 0x30, 0x78, 0x30, 0x30, 0x31, 0x37, 0x32,  //  0x00172
                    /* 0A90 */  0x43, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C,  // C, 0x0A,
                    /* 0A98 */  0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30,  //  0x0A, 0
                    /* 0AA0 */  0x78, 0x30, 0x39, 0x30, 0x30, 0x2C, 0x20, 0x30,  // x0900, 0
                    /* 0AA8 */  0x78, 0x30, 0x39, 0x30, 0x30, 0x20, 0x7D, 0x2C,  // x0900 },
                    /* 0AB0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0AB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63,  //      Pac
                    /* 0AC0 */  0x6B, 0x61, 0x67, 0x65, 0x20, 0x28, 0x30, 0x78,  // kage (0x
                    /* 0AC8 */  0x30, 0x36, 0x29, 0x20, 0x7B, 0x20, 0x30, 0x78,  // 06) { 0x
                    /* 0AD0 */  0x30, 0x33, 0x32, 0x30, 0x2C, 0x20, 0x30, 0x78,  // 0320, 0x
                    /* 0AD8 */  0x30, 0x30, 0x31, 0x34, 0x35, 0x39, 0x2C, 0x20,  // 001459, 
                    /* 0AE0 */  0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78,  // 0x0A, 0x
                    /* 0AE8 */  0x30, 0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x38,  // 0A, 0x08
                    /* 0AF0 */  0x30, 0x30, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x38,  // 00, 0x08
                    /* 0AF8 */  0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20,  // 00 },.  
                    /* 0B00 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0B08 */  0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67,  //   Packag
                    /* 0B10 */  0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x36, 0x29,  // e (0x06)
                    /* 0B18 */  0x20, 0x7B, 0x20, 0x30, 0x78, 0x30, 0x32, 0x42,  //  { 0x02B
                    /* 0B20 */  0x43, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x30, 0x31,  // C, 0x001
                    /* 0B28 */  0x31, 0x39, 0x37, 0x2C, 0x20, 0x30, 0x78, 0x30,  // 197, 0x0
                    /* 0B30 */  0x41, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C,  // A, 0x0A,
                    /* 0B38 */  0x20, 0x30, 0x78, 0x30, 0x37, 0x30, 0x30, 0x2C,  //  0x0700,
                    /* 0B40 */  0x20, 0x30, 0x78, 0x30, 0x37, 0x30, 0x30, 0x20,  //  0x0700 
                    /* 0B48 */  0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // },.     
                    /* 0B50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50,  //        P
                    /* 0B58 */  0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28,  // ackage (
                    /* 0B60 */  0x30, 0x78, 0x30, 0x36, 0x29, 0x20, 0x7B, 0x20,  // 0x06) { 
                    /* 0B68 */  0x30, 0x78, 0x30, 0x32, 0x35, 0x38, 0x2C, 0x20,  // 0x0258, 
                    /* 0B70 */  0x30, 0x78, 0x30, 0x30, 0x30, 0x45, 0x45, 0x34,  // 0x000EE4
                    /* 0B78 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20,  // , 0x0A, 
                    /* 0B80 */  0x30, 0x78, 0x30, 0x41, 0x2C, 0x20, 0x30, 0x78,  // 0x0A, 0x
                    /* 0B88 */  0x30, 0x36, 0x30, 0x30, 0x2C, 0x20, 0x30, 0x78,  // 0600, 0x
                    /* 0B90 */  0x30, 0x36, 0x30, 0x30, 0x20, 0x7D, 0x2C, 0x0A,  // 0600 },.
                    /* 0B98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0BA0 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2A, 0x20, 0x4C,  //     /* L
                    /* 0BA8 */  0x6F, 0x77, 0x20, 0x46, 0x72, 0x65, 0x71, 0x75,  // ow Frequ
                    /* 0BB0 */  0x65, 0x6E, 0x63, 0x79, 0x20, 0x4D, 0x6F, 0x64,  // ency Mod
                    /* 0BB8 */  0x65, 0x20, 0x2A, 0x2F, 0x0A, 0x20, 0x20, 0x20,  // e */.   
                    /* 0BC0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0BC8 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 0BD0 */  0x20, 0x28, 0x30, 0x78, 0x30, 0x36, 0x29, 0x20,  //  (0x06) 
                    /* 0BD8 */  0x7B, 0x20, 0x30, 0x78, 0x30, 0x31, 0x46, 0x34,  // { 0x01F4
                    /* 0BE0 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x43,  // , 0x000C
                    /* 0BE8 */  0x34, 0x32, 0x2C, 0x20, 0x30, 0x78, 0x30, 0x41,  // 42, 0x0A
                    /* 0BF0 */  0x2C, 0x20, 0x30, 0x78, 0x30, 0x41, 0x2C, 0x20,  // , 0x0A, 
                    /* 0BF8 */  0x30, 0x78, 0x30, 0x35, 0x30, 0x30, 0x2C, 0x20,  // 0x0500, 
                    /* 0C00 */  0x30, 0x78, 0x30, 0x35, 0x30, 0x30, 0x20, 0x7D,  // 0x0500 }
                    /* 0C08 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0C10 */  0x20, 0x7D, 0x29, 0x0A, 0x0A, 0x20, 0x20, 0x20,  //  })..   
                    /* 0C18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x65, 0x74,  //      Met
                    /* 0C20 */  0x68, 0x6F, 0x64, 0x20, 0x28, 0x41, 0x43, 0x53,  // hod (ACS
                    /* 0C28 */  0x54, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x4E, 0x6F,  // T, 0, No
                    /* 0C30 */  0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x69,  // tSeriali
                    /* 0C38 */  0x7A, 0x65, 0x64, 0x29, 0x0A, 0x20, 0x20, 0x20,  // zed).   
                    /* 0C40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20,  //      {. 
                    /* 0C48 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0C50 */  0x20, 0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65,  //    Store
                    /* 0C58 */  0x20, 0x28, 0x22, 0x4D, 0x65, 0x74, 0x68, 0x6F,  //  ("Metho
                    /* 0C60 */  0x64, 0x20, 0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43,  // d _PR_.C
                    /* 0C68 */  0x50, 0x55, 0x30, 0x2E, 0x41, 0x43, 0x53, 0x54,  // PU0.ACST
                    /* 0C70 */  0x20, 0x43, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x22,  //  Called"
                    /* 0C78 */  0x2C, 0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x29,  // , Debug)
                    /* 0C80 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0C88 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74, 0x6F,  //      Sto
                    /* 0C90 */  0x72, 0x65, 0x20, 0x28, 0x22, 0x43, 0x50, 0x55,  // re ("CPU
                    /* 0C98 */  0x30, 0x20, 0x43, 0x2D, 0x53, 0x74, 0x61, 0x74,  // 0 C-Stat
                    /* 0CA0 */  0x65, 0x73, 0x20, 0x20, 0x20, 0x20, 0x3A, 0x20,  // es    : 
                    /* 0CA8 */  0x32, 0x39, 0x22, 0x2C, 0x20, 0x44, 0x65, 0x62,  // 29", Deb
                    /* 0CB0 */  0x75, 0x67, 0x29, 0x0A, 0x0A, 0x20, 0x20, 0x20,  // ug)..   
                    /* 0CB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0CC0 */  0x20, 0x2F, 0x2A, 0x20, 0x4C, 0x6F, 0x77, 0x20,  //  /* Low 
                    /* 0CC8 */  0x50, 0x6F, 0x77, 0x65, 0x72, 0x20, 0x4D, 0x6F,  // Power Mo
                    /* 0CD0 */  0x64, 0x65, 0x73, 0x20, 0x66, 0x6F, 0x72, 0x20,  // des for 
                    /* 0CD8 */  0x43, 0x50, 0x55, 0x30, 0x20, 0x2A, 0x2F, 0x0A,  // CPU0 */.
                    /* 0CE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0CE8 */  0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x74, 0x75,  //     Retu
                    /* 0CF0 */  0x72, 0x6E, 0x20, 0x28, 0x50, 0x61, 0x63, 0x6B,  // rn (Pack
                    /* 0CF8 */  0x61, 0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30,  // age (0x0
                    /* 0D00 */  0x36, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // 6).     
                    /* 0D08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B,  //        {
                    /* 0D10 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0D18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D20 */  0x20, 0x4F, 0x6E, 0x65, 0x2C, 0x0A, 0x20, 0x20,  //  One,.  
                    /* 0D28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 0D38 */  0x30, 0x34, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // 04,.    
                    /* 0D40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D48 */  0x20, 0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B,  //     Pack
                    /* 0D50 */  0x61, 0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30,  // age (0x0
                    /* 0D58 */  0x34, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // 4).     
                    /* 0D60 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D68 */  0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20,  //    {.   
                    /* 0D70 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D78 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0D80 */  0x20, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63,  //  Resourc
                    /* 0D88 */  0x65, 0x54, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74,  // eTemplat
                    /* 0D90 */  0x65, 0x20, 0x28, 0x29, 0x0A, 0x20, 0x20, 0x20,  // e ().   
                    /* 0D98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DA0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DA8 */  0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  //  {.     
                    /* 0DB0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DC0 */  0x20, 0x20, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73,  //    Regis
                    /* 0DC8 */  0x74, 0x65, 0x72, 0x20, 0x28, 0x46, 0x46, 0x69,  // ter (FFi
                    /* 0DD0 */  0x78, 0x65, 0x64, 0x48, 0x57, 0x2C, 0x0A, 0x20,  // xedHW,. 
                    /* 0DD8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DE8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0DF0 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x31, 0x2C,  //    0x01,
                    /* 0DF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E00 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F,  //        /
                    /* 0E08 */  0x2F, 0x20, 0x42, 0x69, 0x74, 0x20, 0x57, 0x69,  // / Bit Wi
                    /* 0E10 */  0x64, 0x74, 0x68, 0x0A, 0x20, 0x20, 0x20, 0x20,  // dth.    
                    /* 0E18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E20 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E30 */  0x30, 0x78, 0x30, 0x32, 0x2C, 0x20, 0x20, 0x20,  // 0x02,   
                    /* 0E38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E40 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42,  //     // B
                    /* 0E48 */  0x69, 0x74, 0x20, 0x4F, 0x66, 0x66, 0x73, 0x65,  // it Offse
                    /* 0E50 */  0x74, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // t.      
                    /* 0E58 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E60 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 0E70 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 0E78 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 0E80 */  0x2C, 0x20, 0x2F, 0x2F, 0x20, 0x41, 0x64, 0x64,  // , // Add
                    /* 0E88 */  0x72, 0x65, 0x73, 0x73, 0x0A, 0x20, 0x20, 0x20,  // ress.   
                    /* 0E90 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0E98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EA0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EA8 */  0x20, 0x30, 0x78, 0x30, 0x31, 0x2C, 0x20, 0x20,  //  0x01,  
                    /* 0EB0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20,  //      // 
                    /* 0EC0 */  0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x53,  // Access S
                    /* 0EC8 */  0x69, 0x7A, 0x65, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ize.    
                    /* 0ED0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0ED8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EE8 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 0EF0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0EF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C,  //       },
                    /* 0F00 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 0F08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F10 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4F, 0x6E, 0x65,  //      One
                    /* 0F18 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 0F20 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x5A, 0x65,  //       Ze
                    /* 0F30 */  0x72, 0x6F, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ro,.    
                    /* 0F38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F48 */  0x30, 0x78, 0x30, 0x33, 0x45, 0x38, 0x0A, 0x20,  // 0x03E8. 
                    /* 0F50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F58 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D,  //        }
                    /* 0F60 */  0x2C, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,..     
                    /* 0F68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F70 */  0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,  //    Packa
                    /* 0F78 */  0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x34,  // ge (0x04
                    /* 0F80 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 0F88 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0F90 */  0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   {.    
                    /* 0F98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FA0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FA8 */  0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65,  // Resource
                    /* 0FB0 */  0x54, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65,  // Template
                    /* 0FB8 */  0x20, 0x28, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  ().    
                    /* 0FC0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FC8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FD0 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 0FD8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 0FE8 */  0x20, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,  //   Regist
                    /* 0FF0 */  0x65, 0x72, 0x20, 0x28, 0x46, 0x46, 0x69, 0x78,  // er (FFix
                    /* 0FF8 */  0x65, 0x64, 0x48, 0x57, 0x2C, 0x0A, 0x20, 0x20,  // edHW,.  
                    /* 1000 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1008 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1010 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1018 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x31, 0x2C, 0x20,  //   0x01, 
                    /* 1020 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1028 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F,  //       //
                    /* 1030 */  0x20, 0x42, 0x69, 0x74, 0x20, 0x57, 0x69, 0x64,  //  Bit Wid
                    /* 1038 */  0x74, 0x68, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // th.     
                    /* 1040 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1048 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1050 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30,  //        0
                    /* 1058 */  0x78, 0x30, 0x32, 0x2C, 0x20, 0x20, 0x20, 0x20,  // x02,    
                    /* 1060 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1068 */  0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69,  //    // Bi
                    /* 1070 */  0x74, 0x20, 0x4F, 0x66, 0x66, 0x73, 0x65, 0x74,  // t Offset
                    /* 1078 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1080 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1088 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1090 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 1098 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 10A0 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x31, 0x30, 0x2C,  // 0000010,
                    /* 10A8 */  0x20, 0x2F, 0x2F, 0x20, 0x41, 0x64, 0x64, 0x72,  //  // Addr
                    /* 10B0 */  0x65, 0x73, 0x73, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ess.    
                    /* 10B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 10C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 10C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 10D0 */  0x30, 0x78, 0x30, 0x33, 0x2C, 0x20, 0x20, 0x20,  // 0x03,   
                    /* 10D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 10E0 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x41,  //     // A
                    /* 10E8 */  0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x53, 0x69,  // ccess Si
                    /* 10F0 */  0x7A, 0x65, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ze.     
                    /* 10F8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1100 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1108 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29,  //        )
                    /* 1110 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1118 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1120 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A,  //      },.
                    /* 1128 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1130 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1138 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x33,  //     0x03
                    /* 1140 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1148 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1150 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1158 */  0x43, 0x44, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // CD,.    
                    /* 1160 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1168 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1170 */  0x30, 0x78, 0x30, 0x31, 0x46, 0x34, 0x0A, 0x20,  // 0x01F4. 
                    /* 1178 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1180 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D,  //        }
                    /* 1188 */  0x2C, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,..     
                    /* 1190 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1198 */  0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,  //    Packa
                    /* 11A0 */  0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x34,  // ge (0x04
                    /* 11A8 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 11B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 11B8 */  0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   {.    
                    /* 11C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 11C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 11D0 */  0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65,  // Resource
                    /* 11D8 */  0x54, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65,  // Template
                    /* 11E0 */  0x20, 0x28, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  ().    
                    /* 11E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 11F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 11F8 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 1200 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1208 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1210 */  0x20, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,  //   Regist
                    /* 1218 */  0x65, 0x72, 0x20, 0x28, 0x46, 0x46, 0x69, 0x78,  // er (FFix
                    /* 1220 */  0x65, 0x64, 0x48, 0x57, 0x2C, 0x0A, 0x20, 0x20,  // edHW,.  
                    /* 1228 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1230 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1238 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1240 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x31, 0x2C, 0x20,  //   0x01, 
                    /* 1248 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1250 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F,  //       //
                    /* 1258 */  0x20, 0x42, 0x69, 0x74, 0x20, 0x57, 0x69, 0x64,  //  Bit Wid
                    /* 1260 */  0x74, 0x68, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // th.     
                    /* 1268 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1270 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1278 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30,  //        0
                    /* 1280 */  0x78, 0x30, 0x32, 0x2C, 0x20, 0x20, 0x20, 0x20,  // x02,    
                    /* 1288 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1290 */  0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69,  //    // Bi
                    /* 1298 */  0x74, 0x20, 0x4F, 0x66, 0x66, 0x73, 0x65, 0x74,  // t Offset
                    /* 12A0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 12A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 12B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 12B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 12C0 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 12C8 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x30, 0x2C,  // 0000020,
                    /* 12D0 */  0x20, 0x2F, 0x2F, 0x20, 0x41, 0x64, 0x64, 0x72,  //  // Addr
                    /* 12D8 */  0x65, 0x73, 0x73, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ess.    
                    /* 12E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 12E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 12F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 12F8 */  0x30, 0x78, 0x30, 0x33, 0x2C, 0x20, 0x20, 0x20,  // 0x03,   
                    /* 1300 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1308 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x41,  //     // A
                    /* 1310 */  0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x53, 0x69,  // ccess Si
                    /* 1318 */  0x7A, 0x65, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ze.     
                    /* 1320 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1328 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1330 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29,  //        )
                    /* 1338 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1340 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1348 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A,  //      },.
                    /* 1350 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1358 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1360 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x36,  //     0x06
                    /* 1368 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1370 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1378 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1380 */  0x46, 0x35, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // F5,.    
                    /* 1388 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1390 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1398 */  0x30, 0x78, 0x30, 0x31, 0x35, 0x45, 0x0A, 0x20,  // 0x015E. 
                    /* 13A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 13A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D,  //        }
                    /* 13B0 */  0x2C, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,..     
                    /* 13B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 13C0 */  0x20, 0x20, 0x20, 0x50, 0x61, 0x63, 0x6B, 0x61,  //    Packa
                    /* 13C8 */  0x67, 0x65, 0x20, 0x28, 0x30, 0x78, 0x30, 0x34,  // ge (0x04
                    /* 13D0 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 13D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 13E0 */  0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   {.    
                    /* 13E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 13F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 13F8 */  0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65,  // Resource
                    /* 1400 */  0x54, 0x65, 0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65,  // Template
                    /* 1408 */  0x20, 0x28, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  ().    
                    /* 1410 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1418 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1420 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 1428 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1430 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1438 */  0x20, 0x20, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,  //   Regist
                    /* 1440 */  0x65, 0x72, 0x20, 0x28, 0x46, 0x46, 0x69, 0x78,  // er (FFix
                    /* 1448 */  0x65, 0x64, 0x48, 0x57, 0x2C, 0x0A, 0x20, 0x20,  // edHW,.  
                    /* 1450 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1458 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1460 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1468 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x31, 0x2C, 0x20,  //   0x01, 
                    /* 1470 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1478 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F,  //       //
                    /* 1480 */  0x20, 0x42, 0x69, 0x74, 0x20, 0x57, 0x69, 0x64,  //  Bit Wid
                    /* 1488 */  0x74, 0x68, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // th.     
                    /* 1490 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1498 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 14A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30,  //        0
                    /* 14A8 */  0x78, 0x30, 0x32, 0x2C, 0x20, 0x20, 0x20, 0x20,  // x02,    
                    /* 14B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 14B8 */  0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69,  //    // Bi
                    /* 14C0 */  0x74, 0x20, 0x4F, 0x66, 0x66, 0x73, 0x65, 0x74,  // t Offset
                    /* 14C8 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 14D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 14D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 14E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 14E8 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 14F0 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x30, 0x2C,  // 0000030,
                    /* 14F8 */  0x20, 0x2F, 0x2F, 0x20, 0x41, 0x64, 0x64, 0x72,  //  // Addr
                    /* 1500 */  0x65, 0x73, 0x73, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ess.    
                    /* 1508 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1510 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1518 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1520 */  0x30, 0x78, 0x30, 0x33, 0x2C, 0x20, 0x20, 0x20,  // 0x03,   
                    /* 1528 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1530 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x41,  //     // A
                    /* 1538 */  0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x53, 0x69,  // ccess Si
                    /* 1540 */  0x7A, 0x65, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ze.     
                    /* 1548 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1550 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1558 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x29,  //        )
                    /* 1560 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1568 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1570 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A,  //      },.
                    /* 1578 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1580 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1588 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x37,  //     0x07
                    /* 1590 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1598 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 15A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 15A8 */  0x46, 0x35, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // F5,.    
                    /* 15B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 15B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 15C0 */  0x30, 0x78, 0x43, 0x38, 0x0A, 0x20, 0x20, 0x20,  // 0xC8.   
                    /* 15C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 15D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A, 0x20,  //      }. 
                    /* 15D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 15E0 */  0x20, 0x20, 0x20, 0x7D, 0x29, 0x0A, 0x20, 0x20,  //    }).  
                    /* 15E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A,  //       }.
                    /* 15F0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 15F8 */  0x20, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x20,  //  Method 
                    /* 1600 */  0x28, 0x5F, 0x44, 0x53, 0x4D, 0x2C, 0x20, 0x34,  // (_DSM, 4
                    /* 1608 */  0x2C, 0x20, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x72,  // , NotSer
                    /* 1610 */  0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x29,  // ialized)
                    /* 1618 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1620 */  0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  //  {.     
                    /* 1628 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53,  //        S
                    /* 1630 */  0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x4D,  // tore ("M
                    /* 1638 */  0x65, 0x74, 0x68, 0x6F, 0x64, 0x20, 0x5F, 0x50,  // ethod _P
                    /* 1640 */  0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x30, 0x2E,  // R_.CPU0.
                    /* 1648 */  0x5F, 0x44, 0x53, 0x4D, 0x20, 0x43, 0x61, 0x6C,  // _DSM Cal
                    /* 1650 */  0x6C, 0x65, 0x64, 0x22, 0x2C, 0x20, 0x44, 0x65,  // led", De
                    /* 1658 */  0x62, 0x75, 0x67, 0x29, 0x0A, 0x0A, 0x20, 0x20,  // bug)..  
                    /* 1660 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1668 */  0x20, 0x20, 0x49, 0x66, 0x20, 0x28, 0x4C, 0x45,  //   If (LE
                    /* 1670 */  0x71, 0x75, 0x61, 0x6C, 0x20, 0x28, 0x41, 0x72,  // qual (Ar
                    /* 1678 */  0x67, 0x32, 0x2C, 0x20, 0x5A, 0x65, 0x72, 0x6F,  // g2, Zero
                    /* 1680 */  0x29, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // )).     
                    /* 1688 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B,  //        {
                    /* 1690 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1698 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 16A0 */  0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,  //  Return 
                    /* 16A8 */  0x28, 0x42, 0x75, 0x66, 0x66, 0x65, 0x72, 0x20,  // (Buffer 
                    /* 16B0 */  0x28, 0x4F, 0x6E, 0x65, 0x29, 0x0A, 0x20, 0x20,  // (One).  
                    /* 16B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 16C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  //       {.
                    /* 16C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 16D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 16D8 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x33,  //     0x03
                    /* 16E0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 16E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 16F0 */  0x20, 0x7D, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  }).    
                    /* 16F8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1700 */  0x7D, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // }..     
                    /* 1708 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52,  //        R
                    /* 1710 */  0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28, 0x50,  // eturn (P
                    /* 1718 */  0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28,  // ackage (
                    /* 1720 */  0x30, 0x78, 0x30, 0x32, 0x29, 0x0A, 0x20, 0x20,  // 0x02).  
                    /* 1728 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1730 */  0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   {.    
                    /* 1738 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1740 */  0x20, 0x20, 0x20, 0x20, 0x22, 0x70, 0x6C, 0x75,  //     "plu
                    /* 1748 */  0x67, 0x69, 0x6E, 0x2D, 0x74, 0x79, 0x70, 0x65,  // gin-type
                    /* 1750 */  0x22, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // ",.     
                    /* 1758 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1760 */  0x20, 0x20, 0x20, 0x4F, 0x6E, 0x65, 0x0A, 0x20,  //    One. 
                    /* 1768 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1770 */  0x20, 0x20, 0x20, 0x7D, 0x29, 0x0A, 0x20, 0x20,  //    }).  
                    /* 1778 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A,  //       }.
                    /* 1780 */  0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A, 0x0A, 0x20,  //     }.. 
                    /* 1788 */  0x20, 0x20, 0x20, 0x53, 0x63, 0x6F, 0x70, 0x65,  //    Scope
                    /* 1790 */  0x20, 0x28, 0x5C, 0x5F, 0x50, 0x52, 0x5F, 0x2E,  //  (\_PR_.
                    /* 1798 */  0x43, 0x50, 0x55, 0x31, 0x29, 0x0A, 0x20, 0x20,  // CPU1).  
                    /* 17A0 */  0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   {.    
                    /* 17A8 */  0x20, 0x20, 0x20, 0x20, 0x4D, 0x65, 0x74, 0x68,  //     Meth
                    /* 17B0 */  0x6F, 0x64, 0x20, 0x28, 0x41, 0x50, 0x53, 0x53,  // od (APSS
                    /* 17B8 */  0x2C, 0x20, 0x30, 0x2C, 0x20, 0x4E, 0x6F, 0x74,  // , 0, Not
                    /* 17C0 */  0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x69, 0x7A,  // Serializ
                    /* 17C8 */  0x65, 0x64, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20,  // ed).    
                    /* 17D0 */  0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20,  //     {.  
                    /* 17D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 17E0 */  0x20, 0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20,  //   Store 
                    /* 17E8 */  0x28, 0x22, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64,  // ("Method
                    /* 17F0 */  0x20, 0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50,  //  _PR_.CP
                    /* 17F8 */  0x55, 0x31, 0x2E, 0x41, 0x50, 0x53, 0x53, 0x20,  // U1.APSS 
                    /* 1800 */  0x43, 0x61, 0x6C, 0x6C, 0x65, 0x64, 0x22, 0x2C,  // Called",
                    /* 1808 */  0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x29, 0x0A,  //  Debug).
                    /* 1810 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1818 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x74,  //      Ret
                    /* 1820 */  0x75, 0x72, 0x6E, 0x20, 0x28, 0x5C, 0x5F, 0x50,  // urn (\_P
                    /* 1828 */  0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x30, 0x2E,  // R_.CPU0.
                    /* 1830 */  0x41, 0x50, 0x53, 0x53, 0x29, 0x0A, 0x20, 0x20,  // APSS).  
                    /* 1838 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x0A,  //       }.
                    /* 1840 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1848 */  0x20, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x20,  //  Method 
                    /* 1850 */  0x28, 0x41, 0x43, 0x53, 0x54, 0x2C, 0x20, 0x30,  // (ACST, 0
                    /* 1858 */  0x2C, 0x20, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x72,  // , NotSer
                    /* 1860 */  0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x29,  // ialized)
                    /* 1868 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1870 */  0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  //  {.     
                    /* 1878 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53,  //        S
                    /* 1880 */  0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x4D,  // tore ("M
                    /* 1888 */  0x65, 0x74, 0x68, 0x6F, 0x64, 0x20, 0x5F, 0x50,  // ethod _P
                    /* 1890 */  0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x31, 0x2E,  // R_.CPU1.
                    /* 1898 */  0x41, 0x43, 0x53, 0x54, 0x20, 0x43, 0x61, 0x6C,  // ACST Cal
                    /* 18A0 */  0x6C, 0x65, 0x64, 0x22, 0x2C, 0x20, 0x44, 0x65,  // led", De
                    /* 18A8 */  0x62, 0x75, 0x67, 0x29, 0x0A, 0x20, 0x20, 0x20,  // bug).   
                    /* 18B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 18B8 */  0x20, 0x53, 0x74, 0x6F, 0x72, 0x65, 0x20, 0x28,  //  Store (
                    /* 18C0 */  0x22, 0x43, 0x50, 0x55, 0x31, 0x20, 0x43, 0x2D,  // "CPU1 C-
                    /* 18C8 */  0x53, 0x74, 0x61, 0x74, 0x65, 0x73, 0x20, 0x20,  // States  
                    /* 18D0 */  0x20, 0x20, 0x3A, 0x20, 0x33, 0x31, 0x22, 0x2C,  //   : 31",
                    /* 18D8 */  0x20, 0x44, 0x65, 0x62, 0x75, 0x67, 0x29, 0x0A,  //  Debug).
                    /* 18E0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 18E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x2F, 0x2A, 0x20,  //      /* 
                    /* 18F0 */  0x4C, 0x6F, 0x77, 0x20, 0x50, 0x6F, 0x77, 0x65,  // Low Powe
                    /* 18F8 */  0x72, 0x20, 0x4D, 0x6F, 0x64, 0x65, 0x73, 0x20,  // r Modes 
                    /* 1900 */  0x66, 0x6F, 0x72, 0x20, 0x43, 0x50, 0x55, 0x31,  // for CPU1
                    /* 1908 */  0x20, 0x2A, 0x2F, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  */.    
                    /* 1910 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1918 */  0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28,  // Return (
                    /* 1920 */  0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20,  // Package 
                    /* 1928 */  0x28, 0x30, 0x78, 0x30, 0x37, 0x29, 0x0A, 0x20,  // (0x07). 
                    /* 1930 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1938 */  0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20,  //    {.   
                    /* 1940 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1948 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4F, 0x6E, 0x65,  //      One
                    /* 1950 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1958 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1960 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x35, 0x2C, 0x0A,  //   0x05,.
                    /* 1968 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1970 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1978 */  0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20,  // Package 
                    /* 1980 */  0x28, 0x30, 0x78, 0x30, 0x34, 0x29, 0x0A, 0x20,  // (0x04). 
                    /* 1988 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1990 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B,  //        {
                    /* 1998 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 19A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 19A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x73,  //      Res
                    /* 19B0 */  0x6F, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6D,  // ourceTem
                    /* 19B8 */  0x70, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x28, 0x29,  // plate ()
                    /* 19C0 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 19C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 19D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20,  //      {. 
                    /* 19D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 19E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 19E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52,  //        R
                    /* 19F0 */  0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20,  // egister 
                    /* 19F8 */  0x28, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48,  // (FFixedH
                    /* 1A00 */  0x57, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // W,.     
                    /* 1A08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A10 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30,  //        0
                    /* 1A20 */  0x78, 0x30, 0x31, 0x2C, 0x20, 0x20, 0x20, 0x20,  // x01,    
                    /* 1A28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A30 */  0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69,  //    // Bi
                    /* 1A38 */  0x74, 0x20, 0x57, 0x69, 0x64, 0x74, 0x68, 0x0A,  // t Width.
                    /* 1A40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A48 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A58 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x32,  //     0x02
                    /* 1A60 */  0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,       
                    /* 1A68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A70 */  0x2F, 0x2F, 0x20, 0x42, 0x69, 0x74, 0x20, 0x4F,  // // Bit O
                    /* 1A78 */  0x66, 0x66, 0x73, 0x65, 0x74, 0x0A, 0x20, 0x20,  // ffset.  
                    /* 1A80 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A88 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A90 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1A98 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30,  //   0x0000
                    /* 1AA0 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 1AA8 */  0x30, 0x30, 0x30, 0x30, 0x2C, 0x20, 0x2F, 0x2F,  // 0000, //
                    /* 1AB0 */  0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,  //  Address
                    /* 1AB8 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1AC0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1AC8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1AD0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 1AD8 */  0x31, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // 1,      
                    /* 1AE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1AE8 */  0x20, 0x2F, 0x2F, 0x20, 0x41, 0x63, 0x63, 0x65,  //  // Acce
                    /* 1AF0 */  0x73, 0x73, 0x20, 0x53, 0x69, 0x7A, 0x65, 0x0A,  // ss Size.
                    /* 1AF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B00 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B10 */  0x20, 0x20, 0x20, 0x20, 0x29, 0x0A, 0x20, 0x20,  //     ).  
                    /* 1B18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B20 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B28 */  0x20, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20,  //   },.   
                    /* 1B30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B40 */  0x20, 0x4F, 0x6E, 0x65, 0x2C, 0x0A, 0x20, 0x20,  //  One,.  
                    /* 1B48 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B58 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x33, 0x45, 0x38,  //   0x03E8
                    /* 1B60 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1B68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B70 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1B78 */  0x30, 0x33, 0x45, 0x38, 0x0A, 0x20, 0x20, 0x20,  // 03E8.   
                    /* 1B80 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1B88 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A,  //      },.
                    /* 1B90 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1B98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1BA0 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 1BA8 */  0x20, 0x28, 0x30, 0x78, 0x30, 0x34, 0x29, 0x0A,  //  (0x04).
                    /* 1BB0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1BB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1BC0 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 1BC8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1BD0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65,  //       Re
                    /* 1BD8 */  0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65,  // sourceTe
                    /* 1BE0 */  0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x28,  // mplate (
                    /* 1BE8 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 1BF0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1BF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  //       {.
                    /* 1C00 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C10 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C18 */  0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,  // Register
                    /* 1C20 */  0x20, 0x28, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,  //  (FFixed
                    /* 1C28 */  0x48, 0x57, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // HW,.    
                    /* 1C30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C48 */  0x30, 0x78, 0x30, 0x31, 0x2C, 0x20, 0x20, 0x20,  // 0x01,   
                    /* 1C50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C58 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42,  //     // B
                    /* 1C60 */  0x69, 0x74, 0x20, 0x57, 0x69, 0x64, 0x74, 0x68,  // it Width
                    /* 1C68 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1C70 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C78 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C80 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 1C88 */  0x32, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // 2,      
                    /* 1C90 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1C98 */  0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69, 0x74, 0x20,  //  // Bit 
                    /* 1CA0 */  0x4F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0A, 0x20,  // Offset. 
                    /* 1CA8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1CB0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1CB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1CC0 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,  //    0x000
                    /* 1CC8 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 1CD0 */  0x30, 0x30, 0x30, 0x31, 0x30, 0x2C, 0x20, 0x2F,  // 00010, /
                    /* 1CD8 */  0x2F, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,  // / Addres
                    /* 1CE0 */  0x73, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // s.      
                    /* 1CE8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1CF0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1CF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1D00 */  0x30, 0x33, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20,  // 03,     
                    /* 1D08 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D10 */  0x20, 0x20, 0x2F, 0x2F, 0x20, 0x41, 0x63, 0x63,  //   // Acc
                    /* 1D18 */  0x65, 0x73, 0x73, 0x20, 0x53, 0x69, 0x7A, 0x65,  // ess Size
                    /* 1D20 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1D28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x0A, 0x20,  //      ). 
                    /* 1D40 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D48 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D50 */  0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20,  //    },.  
                    /* 1D58 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D60 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D68 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x32, 0x2C, 0x0A,  //   0x02,.
                    /* 1D70 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D78 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D80 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x39, 0x34,  //     0x94
                    /* 1D88 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1D90 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1D98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1DA0 */  0x30, 0x31, 0x46, 0x34, 0x0A, 0x20, 0x20, 0x20,  // 01F4.   
                    /* 1DA8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1DB0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A,  //      },.
                    /* 1DB8 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1DC0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1DC8 */  0x20, 0x50, 0x61, 0x63, 0x6B, 0x61, 0x67, 0x65,  //  Package
                    /* 1DD0 */  0x20, 0x28, 0x30, 0x78, 0x30, 0x34, 0x29, 0x0A,  //  (0x04).
                    /* 1DD8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1DE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1DE8 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 1DF0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1DF8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65,  //       Re
                    /* 1E00 */  0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x54, 0x65,  // sourceTe
                    /* 1E08 */  0x6D, 0x70, 0x6C, 0x61, 0x74, 0x65, 0x20, 0x28,  // mplate (
                    /* 1E10 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 1E18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E20 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  //       {.
                    /* 1E28 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E38 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E40 */  0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,  // Register
                    /* 1E48 */  0x20, 0x28, 0x46, 0x46, 0x69, 0x78, 0x65, 0x64,  //  (FFixed
                    /* 1E50 */  0x48, 0x57, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  // HW,.    
                    /* 1E58 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E60 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E70 */  0x30, 0x78, 0x30, 0x31, 0x2C, 0x20, 0x20, 0x20,  // 0x01,   
                    /* 1E78 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1E80 */  0x20, 0x20, 0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42,  //     // B
                    /* 1E88 */  0x69, 0x74, 0x20, 0x57, 0x69, 0x64, 0x74, 0x68,  // it Width
                    /* 1E90 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1E98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1EA0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1EA8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30,  //      0x0
                    /* 1EB0 */  0x32, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // 2,      
                    /* 1EB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1EC0 */  0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69, 0x74, 0x20,  //  // Bit 
                    /* 1EC8 */  0x4F, 0x66, 0x66, 0x73, 0x65, 0x74, 0x0A, 0x20,  // Offset. 
                    /* 1ED0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1ED8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1EE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1EE8 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x30, 0x30,  //    0x000
                    /* 1EF0 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 1EF8 */  0x30, 0x30, 0x30, 0x33, 0x30, 0x2C, 0x20, 0x2F,  // 00030, /
                    /* 1F00 */  0x2F, 0x20, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73,  // / Addres
                    /* 1F08 */  0x73, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // s.      
                    /* 1F10 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F18 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F20 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1F28 */  0x30, 0x33, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20,  // 03,     
                    /* 1F30 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F38 */  0x20, 0x20, 0x2F, 0x2F, 0x20, 0x41, 0x63, 0x63,  //   // Acc
                    /* 1F40 */  0x65, 0x73, 0x73, 0x20, 0x53, 0x69, 0x7A, 0x65,  // ess Size
                    /* 1F48 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 1F50 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F58 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F60 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x29, 0x0A, 0x20,  //      ). 
                    /* 1F68 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F70 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F78 */  0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20,  //    },.  
                    /* 1F80 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F88 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1F90 */  0x20, 0x20, 0x30, 0x78, 0x30, 0x33, 0x2C, 0x0A,  //   0x03,.
                    /* 1F98 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1FA0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1FA8 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x43, 0x36,  //     0xC6
                    /* 1FB0 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 1FB8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1FC0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 1FC8 */  0x43, 0x38, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // C8.     
                    /* 1FD0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1FD8 */  0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A, 0x0A, 0x20,  //    },.. 
                    /* 1FE0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 1FE8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50,  //        P
                    /* 1FF0 */  0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28,  // ackage (
                    /* 1FF8 */  0x30, 0x78, 0x30, 0x34, 0x29, 0x0A, 0x20, 0x20,  // 0x04).  
                    /* 2000 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2008 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  //       {.
                    /* 2010 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2018 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2020 */  0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x73, 0x6F,  //     Reso
                    /* 2028 */  0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6D, 0x70,  // urceTemp
                    /* 2030 */  0x6C, 0x61, 0x74, 0x65, 0x20, 0x28, 0x29, 0x0A,  // late ().
                    /* 2038 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2040 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2048 */  0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20,  //     {.  
                    /* 2050 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2058 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2060 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65,  //       Re
                    /* 2068 */  0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x28,  // gister (
                    /* 2070 */  0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48, 0x57,  // FFixedHW
                    /* 2078 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 2080 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2088 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2090 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 2098 */  0x30, 0x31, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20,  // 01,     
                    /* 20A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 20A8 */  0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69, 0x74,  //   // Bit
                    /* 20B0 */  0x20, 0x57, 0x69, 0x64, 0x74, 0x68, 0x0A, 0x20,  //  Width. 
                    /* 20B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 20C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 20C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 20D0 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x32, 0x2C,  //    0x02,
                    /* 20D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 20E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F,  //        /
                    /* 20E8 */  0x2F, 0x20, 0x42, 0x69, 0x74, 0x20, 0x4F, 0x66,  // / Bit Of
                    /* 20F0 */  0x66, 0x73, 0x65, 0x74, 0x0A, 0x20, 0x20, 0x20,  // fset.   
                    /* 20F8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2100 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2108 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2110 */  0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,  //  0x00000
                    /* 2118 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 2120 */  0x30, 0x34, 0x30, 0x2C, 0x20, 0x2F, 0x2F, 0x20,  // 040, // 
                    /* 2128 */  0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x0A,  // Address.
                    /* 2130 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2138 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2140 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2148 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x33,  //     0x03
                    /* 2150 */  0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,       
                    /* 2158 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2160 */  0x2F, 0x2F, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73,  // // Acces
                    /* 2168 */  0x73, 0x20, 0x53, 0x69, 0x7A, 0x65, 0x0A, 0x20,  // s Size. 
                    /* 2170 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2178 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2180 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2188 */  0x20, 0x20, 0x20, 0x29, 0x0A, 0x20, 0x20, 0x20,  //    ).   
                    /* 2190 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2198 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21A0 */  0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  },.    
                    /* 21A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21B8 */  0x30, 0x78, 0x30, 0x36, 0x2C, 0x0A, 0x20, 0x20,  // 0x06,.  
                    /* 21C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21D0 */  0x20, 0x20, 0x30, 0x78, 0x46, 0x35, 0x2C, 0x0A,  //   0xF5,.
                    /* 21D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 21E8 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x31,  //     0x01
                    /* 21F0 */  0x35, 0x45, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // 5E.     
                    /* 21F8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2200 */  0x20, 0x20, 0x20, 0x7D, 0x2C, 0x0A, 0x0A, 0x20,  //    },.. 
                    /* 2208 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2210 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x50,  //        P
                    /* 2218 */  0x61, 0x63, 0x6B, 0x61, 0x67, 0x65, 0x20, 0x28,  // ackage (
                    /* 2220 */  0x30, 0x78, 0x30, 0x34, 0x29, 0x0A, 0x20, 0x20,  // 0x04).  
                    /* 2228 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2230 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  //       {.
                    /* 2238 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2240 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2248 */  0x20, 0x20, 0x20, 0x20, 0x52, 0x65, 0x73, 0x6F,  //     Reso
                    /* 2250 */  0x75, 0x72, 0x63, 0x65, 0x54, 0x65, 0x6D, 0x70,  // urceTemp
                    /* 2258 */  0x6C, 0x61, 0x74, 0x65, 0x20, 0x28, 0x29, 0x0A,  // late ().
                    /* 2260 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2268 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2270 */  0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A, 0x20, 0x20,  //     {.  
                    /* 2278 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2280 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2288 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x52, 0x65,  //       Re
                    /* 2290 */  0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x20, 0x28,  // gister (
                    /* 2298 */  0x46, 0x46, 0x69, 0x78, 0x65, 0x64, 0x48, 0x57,  // FFixedHW
                    /* 22A0 */  0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,.      
                    /* 22A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22B0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x30, 0x78,  //       0x
                    /* 22C0 */  0x30, 0x31, 0x2C, 0x20, 0x20, 0x20, 0x20, 0x20,  // 01,     
                    /* 22C8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22D0 */  0x20, 0x20, 0x2F, 0x2F, 0x20, 0x42, 0x69, 0x74,  //   // Bit
                    /* 22D8 */  0x20, 0x57, 0x69, 0x64, 0x74, 0x68, 0x0A, 0x20,  //  Width. 
                    /* 22E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 22F8 */  0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x32, 0x2C,  //    0x02,
                    /* 2300 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2308 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x2F,  //        /
                    /* 2310 */  0x2F, 0x20, 0x42, 0x69, 0x74, 0x20, 0x4F, 0x66,  // / Bit Of
                    /* 2318 */  0x66, 0x73, 0x65, 0x74, 0x0A, 0x20, 0x20, 0x20,  // fset.   
                    /* 2320 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2328 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2330 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2338 */  0x20, 0x30, 0x78, 0x30, 0x30, 0x30, 0x30, 0x30,  //  0x00000
                    /* 2340 */  0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30,  // 00000000
                    /* 2348 */  0x30, 0x35, 0x30, 0x2C, 0x20, 0x2F, 0x2F, 0x20,  // 050, // 
                    /* 2350 */  0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x0A,  // Address.
                    /* 2358 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2360 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2368 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2370 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x30, 0x33,  //     0x03
                    /* 2378 */  0x2C, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ,       
                    /* 2380 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2388 */  0x2F, 0x2F, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73,  // // Acces
                    /* 2390 */  0x73, 0x20, 0x53, 0x69, 0x7A, 0x65, 0x0A, 0x20,  // s Size. 
                    /* 2398 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23B0 */  0x20, 0x20, 0x20, 0x29, 0x0A, 0x20, 0x20, 0x20,  //    ).   
                    /* 23B8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23C0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23C8 */  0x20, 0x7D, 0x2C, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  },.    
                    /* 23D0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23E0 */  0x30, 0x78, 0x30, 0x37, 0x2C, 0x0A, 0x20, 0x20,  // 0x07,.  
                    /* 23E8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23F0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 23F8 */  0x20, 0x20, 0x30, 0x78, 0x46, 0x35, 0x2C, 0x0A,  //   0xF5,.
                    /* 2400 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2408 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2410 */  0x20, 0x20, 0x20, 0x20, 0x30, 0x78, 0x43, 0x38,  //     0xC8
                    /* 2418 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 2420 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2428 */  0x20, 0x7D, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  //  }.     
                    /* 2430 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x7D,  //        }
                    /* 2438 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 2440 */  0x20, 0x20, 0x7D, 0x0A, 0x20, 0x20, 0x20, 0x20,  //   }.    
                    /* 2448 */  0x7D, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x53,  // }..    S
                    /* 2450 */  0x63, 0x6F, 0x70, 0x65, 0x20, 0x28, 0x5C, 0x5F,  // cope (\_
                    /* 2458 */  0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x32,  // PR_.CPU2
                    /* 2460 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7B, 0x0A,  // ).    {.
                    /* 2468 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2470 */  0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x20, 0x28,  // Method (
                    /* 2478 */  0x41, 0x50, 0x53, 0x53, 0x2C, 0x20, 0x30, 0x2C,  // APSS, 0,
                    /* 2480 */  0x20, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x72, 0x69,  //  NotSeri
                    /* 2488 */  0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x29, 0x0A,  // alized).
                    /* 2490 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 2498 */  0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // {.      
                    /* 24A0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53, 0x74,  //       St
                    /* 24A8 */  0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x4D, 0x65,  // ore ("Me
                    /* 24B0 */  0x74, 0x68, 0x6F, 0x64, 0x20, 0x5F, 0x50, 0x52,  // thod _PR
                    /* 24B8 */  0x5F, 0x2E, 0x43, 0x50, 0x55, 0x32, 0x2E, 0x41,  // _.CPU2.A
                    /* 24C0 */  0x50, 0x53, 0x53, 0x20, 0x43, 0x61, 0x6C, 0x6C,  // PSS Call
                    /* 24C8 */  0x65, 0x64, 0x22, 0x2C, 0x20, 0x44, 0x65, 0x62,  // ed", Deb
                    /* 24D0 */  0x75, 0x67, 0x29, 0x0A, 0x0A, 0x20, 0x20, 0x20,  // ug)..   
                    /* 24D8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 24E0 */  0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20,  //  Return 
                    /* 24E8 */  0x28, 0x5C, 0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43,  // (\_PR_.C
                    /* 24F0 */  0x50, 0x55, 0x30, 0x2E, 0x41, 0x50, 0x53, 0x53,  // PU0.APSS
                    /* 24F8 */  0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // ).      
                    /* 2500 */  0x20, 0x20, 0x7D, 0x0A, 0x0A, 0x20, 0x20, 0x20,  //   }..   
                    /* 2508 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x65, 0x74,  //      Met
                    /* 2510 */  0x68, 0x6F, 0x64, 0x20, 0x28, 0x41, 0x43, 0x53,  // hod (ACS
                    /* 2518 */  0x54, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x4E, 0x6F,  // T, 0, No
                    /* 2520 */  0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C, 0x69,  // tSeriali
                    /* 2528 */  0x7A, 0x65, 0x64, 0x29, 0x20, 0x7B, 0x20, 0x52,  // zed) { R
                    /* 2530 */  0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28, 0x5C,  // eturn (\
                    /* 2538 */  0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55,  // _PR_.CPU
                    /* 2540 */  0x31, 0x2E, 0x41, 0x43, 0x53, 0x54, 0x20, 0x28,  // 1.ACST (
                    /* 2548 */  0x29, 0x29, 0x20, 0x7D, 0x0A, 0x20, 0x20, 0x20,  // )) }.   
                    /* 2550 */  0x20, 0x7D, 0x0A, 0x0A, 0x20, 0x20, 0x20, 0x20,  //  }..    
                    /* 2558 */  0x53, 0x63, 0x6F, 0x70, 0x65, 0x20, 0x28, 0x5C,  // Scope (\
                    /* 2560 */  0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55,  // _PR_.CPU
                    /* 2568 */  0x33, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x7B,  // 3).    {
                    /* 2570 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 2578 */  0x20, 0x4D, 0x65, 0x74, 0x68, 0x6F, 0x64, 0x20,  //  Method 
                    /* 2580 */  0x28, 0x41, 0x50, 0x53, 0x53, 0x2C, 0x20, 0x30,  // (APSS, 0
                    /* 2588 */  0x2C, 0x20, 0x4E, 0x6F, 0x74, 0x53, 0x65, 0x72,  // , NotSer
                    /* 2590 */  0x69, 0x61, 0x6C, 0x69, 0x7A, 0x65, 0x64, 0x29,  // ialized)
                    /* 2598 */  0x0A, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  // .       
                    /* 25A0 */  0x20, 0x7B, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  //  {.     
                    /* 25A8 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x53,  //        S
                    /* 25B0 */  0x74, 0x6F, 0x72, 0x65, 0x20, 0x28, 0x22, 0x4D,  // tore ("M
                    /* 25B8 */  0x65, 0x74, 0x68, 0x6F, 0x64, 0x20, 0x5F, 0x50,  // ethod _P
                    /* 25C0 */  0x52, 0x5F, 0x2E, 0x43, 0x50, 0x55, 0x33, 0x2E,  // R_.CPU3.
                    /* 25C8 */  0x41, 0x50, 0x53, 0x53, 0x20, 0x43, 0x61, 0x6C,  // APSS Cal
                    /* 25D0 */  0x6C, 0x65, 0x64, 0x22, 0x2C, 0x20, 0x44, 0x65,  // led", De
                    /* 25D8 */  0x62, 0x75, 0x67, 0x29, 0x0A, 0x0A, 0x20, 0x20,  // bug)..  
                    /* 25E0 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,  //         
                    /* 25E8 */  0x20, 0x20, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6E,  //   Return
                    /* 25F0 */  0x20, 0x28, 0x5C, 0x5F, 0x50, 0x52, 0x5F, 0x2E,  //  (\_PR_.
                    /* 25F8 */  0x43, 0x50, 0x55, 0x30, 0x2E, 0x41, 0x50, 0x53,  // CPU0.APS
                    /* 2600 */  0x53, 0x29, 0x0A, 0x20, 0x20, 0x20, 0x20, 0x20,  // S).     
                    /* 2608 */  0x20, 0x20, 0x20, 0x7D, 0x0A, 0x0A, 0x20, 0x20,  //    }..  
                    /* 2610 */  0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x4D, 0x65,  //       Me
                    /* 2618 */  0x74, 0x68, 0x6F, 0x64, 0x20, 0x28, 0x41, 0x43,  // thod (AC
                    /* 2620 */  0x53, 0x54, 0x2C, 0x20, 0x30, 0x2C, 0x20, 0x4E,  // ST, 0, N
                    /* 2628 */  0x6F, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6C,  // otSerial
                    /* 2630 */  0x69, 0x7A, 0x65, 0x64, 0x29, 0x20, 0x7B, 0x20,  // ized) { 
                    /* 2638 */  0x52, 0x65, 0x74, 0x75, 0x72, 0x6E, 0x20, 0x28,  // Return (
                    /* 2640 */  0x5C, 0x5F, 0x50, 0x52, 0x5F, 0x2E, 0x43, 0x50,  // \_PR_.CP
                    /* 2648 */  0x55, 0x31, 0x2E, 0x41, 0x43, 0x53, 0x54, 0x20,  // U1.ACST 
                    /* 2650 */  0x28, 0x29, 0x29, 0x20, 0x7D, 0x0A, 0x20, 0x20,  // ()) }.  
                    /* 2658 */  0x20, 0x20, 0x7D, 0x0A, 0x7D, 0x0A               //   }.}.
                }
            })
        }
    }

    Scope (\_PR.CPU1)
    {
        Method (APSS, 0, NotSerialized)
        {
            Debug = "Method _PR_.CPU1.APSS Called"
            Return (\_PR.CPU0.APSS)
        }

        Method (ACST, 0, NotSerialized)
        {
            Debug = "Method _PR_.CPU1.ACST Called"
            Debug = "CPU1 C-States    : 31"
            Return (Package (0x07)
            {
                One, 
                0x05, 
                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000000, // Address
                            0x01,               // Access Size
                            )
                    }, 

                    One, 
                    0x03E8, 
                    0x03E8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000010, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x02, 
                    0x94, 
                    0x01F4
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000030, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x03, 
                    0xC6, 
                    0xC8
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000040, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x06, 
                    0xF5, 
                    0x015E
                }, 

                Package (0x04)
                {
                    ResourceTemplate ()
                    {
                        Register (FFixedHW, 
                            0x01,               // Bit Width
                            0x02,               // Bit Offset
                            0x0000000000000050, // Address
                            0x03,               // Access Size
                            )
                    }, 

                    0x07, 
                    0xF5, 
                    0xC8
                }
            })
        }
    }

    Scope (\_PR.CPU2)
    {
        Method (APSS, 0, NotSerialized)
        {
            Debug = "Method _PR_.CPU2.APSS Called"
            Return (\_PR.CPU0.APSS)
        }

        Method (ACST, 0, NotSerialized)
        {
            Return (\_PR.CPU1.ACST ())
        }
    }

    Scope (\_PR.CPU3)
    {
        Method (APSS, 0, NotSerialized)
        {
            Debug = "Method _PR_.CPU3.APSS Called"
            Return (\_PR.CPU0.APSS)
        }

        Method (ACST, 0, NotSerialized)
        {
            Return (\_PR.CPU1.ACST ())
        }
    }
}
